package view;

import java.awt.BorderLayout;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JButton;
import javax.swing.JTextField;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.Component;
import org.eclipse.wb.swing.FocusTraversalOnArray;

import javax.swing.JComboBox;
import java.awt.GridLayout;

/**
 * This is a GUI to run  Ball World
 * @author Qingyue Liu, Haoshan Zou
 * @version 1.0
 * @param <TDropListItem> the objects that drop list items stand for.
 * @since 2017-09-07
 */
public class BallFrame<TDropListItem> extends JFrame {

	/**
	 * serialVersionUID is the serial version UID.
	 */
	private static final long serialVersionUID = -8987134431120800637L;

	/**
	 * contentPane is the container panel.
	 */
	private JPanel contentPane;

	/**
	 * pnlControl is the a panel which is used to put control components.
	 */
	private final JPanel pnlControl = new JPanel();

	/**
	 * btnMakeBall is the button to create a ball with type in the left text field.
	 */
	private final JButton btnMakeBall = new JButton("Make Selected Ball");

	/**
	 * btnClearAll is the button to remove all the balls on the ball panel.
	 */
	private final JButton btnClearAll = new JButton("Clear All");

	/**
	 * JTextField is the text field to type in different ball types.
	 */
	private final JTextField txtStrategy = new JTextField();

//	/**
//	 * IView2ModelAdapter is an instance of view to model adapter. The model adapter is initialized to a no-op to insure that system always has well-defined behavior.
//	 */
//	private IView2ModelAdapter _view2ModelAdpt = IView2ModelAdapter.NULL_OBJECT;
//	
    /**
     * Adapter back to the model for control tasks.
     */
     private IModelControlAdapter<TDropListItem> _modelControlAdpt;  
     /**
     * Adapter back to the model for update tasks.
     */
    private IModelUpdateAdapter _modelUpdateAdpt;  

	/**
	 * pnlBall is the ball panel which shows the animation of different type of balls.
	 */
	private final JPanel pnlBall = new JPanel() {

		/**
		 * serialVersionUID is the serial version UID.
		 */
		private static final long serialVersionUID = 4048578419360286049L;

		/**
		* Overridden paintComponent method to paint a shape in the panel.
		* @param g The Graphics object to paint on.
		**/
		public void paintComponent(Graphics g) {
			super.paintComponent(g); // Do everything normally done first, e.g. clear the screen.
			_modelUpdateAdpt.update(g); // call back to the model to paint the sprites

		}
	};
	/**
	 * strategy selection, switch and combine panel.
	 */
	private final JPanel pnlStrategy = new JPanel();
	/**
	 * the add strategy to list button.
	 */
	private final JButton btnAdd = new JButton("Add to lists");
	/**
	 * the make ball panel
	 */
	private final JPanel pnlMake = new JPanel();
	/**
	 * the combine drop list1
	 */
	private final JComboBox<TDropListItem> combo1 = new JComboBox<TDropListItem>();
	/**
	 * the combine drop list2
	 */
	private final JComboBox<TDropListItem> combo2 = new JComboBox<TDropListItem>();
	/**
	 * the combine two strategies button.
	 */
	private final JButton btnCombine = new JButton("Combine!");
	/**
	 * the switch strategy panel.
	 */
	private final JPanel pnlSwitch = new JPanel();
	/**
	 * the make switcher ball button.
	 */
	private final JButton btnMakeSwitcher = new JButton("Make Switcher");
	
	/**
	 * the switch strategy button.
	 */
	private final JButton btnSwitch = new JButton("Switch!");


	/**
	 * Start method to start the GUI. This method is called by controller.
	 * @param view The main frame of ball word GUI.
	 */
	public void start(BallFrame<TDropListItem> view) {
		view.setVisible(true);
	}

	/**
	 * Update function to updates the view by repainting the canvas.
	 */
	public void update() {
		pnlBall.repaint();
	}

//	public BallFrame(IView2ModelAdapter _view2ModelAdpt) {
//		this._view2ModelAdpt = _view2ModelAdpt;
//		initGUI();
//	}
	/**
	 * Constructor of BallFrame.
	 * @param modelControlAdpt An instance of view to model control adaptor.
	 * @param modelUpdateAdpt An instance of view to model update adaptor.
	 */
    public BallFrame(IModelControlAdapter<TDropListItem> modelControlAdpt, IModelUpdateAdapter modelUpdateAdpt) {
        this._modelControlAdpt = modelControlAdpt;  
        this._modelUpdateAdpt = modelUpdateAdpt;
        initGUI();
    }

	/**
	 * initGUI initialize all the components on the frame.
	 */
	private void initGUI() {
		//Frame settings
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 664, 427);

		//Container panel settings
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);
		pnlControl.setBackground(new Color(152, 251, 152));

		//Control panel settings
		contentPane.add(pnlControl, BorderLayout.NORTH);
		
		pnlControl.add(pnlStrategy);
		txtStrategy.setToolTipText("Name of strategy, XXX, from ballworld.XXXStrategy.");
		
		pnlControl.add(pnlMake);
				pnlMake.setLayout(new GridLayout(0, 1, 0, 0));
				pnlMake.add(btnMakeBall);
		
				btnMakeBall.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
		                _modelControlAdpt.makeBall(combo1.getItemAt(combo1.getSelectedIndex()));

//						_view2ModelAdpt.addBall(txtStrategy.getText());
					}
				});
		btnMakeBall.setToolTipText("Create a ball with the type in the text field");
		
		pnlMake.add(combo1);
		
		pnlMake.add(combo2);
		btnCombine.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TDropListItem o = _modelControlAdpt.combineStrategies(combo1.getItemAt(combo1.getSelectedIndex()),combo2.getItemAt(combo2.getSelectedIndex()));
                if (null == o) return; // just in case
        		
                combo1.insertItemAt(o, 0);
                combo2.insertItemAt(o, 0);
			}
		});
		
		pnlMake.add(btnCombine);
		btnClearAll.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				_modelControlAdpt.clearBalls();
//				_view2ModelAdpt.clearBalls();
			}
		});
		
		pnlControl.add(pnlSwitch);
		pnlSwitch.setLayout(new GridLayout(2, 1, 0, 0));		
		btnMakeSwitcher.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
                _modelControlAdpt.makeSwitcherBall();

			}
		});
		pnlSwitch.add(btnMakeSwitcher);		
		btnSwitch.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
                _modelControlAdpt.switchStrategy(combo1.getItemAt(combo1.getSelectedIndex()));
			}
		});
		pnlSwitch.add(btnSwitch);
		
		btnClearAll.setToolTipText("Remove all the balls in the ball panel");

		pnlControl.add(btnClearAll);
		pnlBall.setBackground(new Color(224, 255, 255));

		//Ball panel settings
		pnlBall.setSize(600, 800);
		contentPane.add(pnlBall, BorderLayout.CENTER);

		//Set the panel for ball world
		_modelControlAdpt.setPanel(pnlBall);
//		_view2ModelAdpt.setPanel(pnlBall);
		
		pnlStrategy.setLayout(new GridLayout(0, 1, 0, 0));
		txtStrategy.setColumns(5);
		txtStrategy.setText("Straight");
		pnlStrategy.add(txtStrategy);
		btnAdd.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
                TDropListItem o = _modelControlAdpt.addStrategy(txtStrategy.getText());
                if (null == o) return; // just in case
                combo1.insertItemAt(o, 0);
                combo2.insertItemAt(o, 0);
			}
		});
		btnAdd.setToolTipText("Add strategy to both droplists. The rest of classname is added automatically.");
		pnlStrategy.add(btnAdd);
		pnlStrategy.setFocusTraversalPolicy(new FocusTraversalOnArray(new Component[]{txtStrategy, btnAdd}));
	}

}
