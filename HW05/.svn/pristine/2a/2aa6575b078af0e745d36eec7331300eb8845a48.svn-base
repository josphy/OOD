<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_121) on Tue Oct 03 16:06:29 CDT 2017 -->
<title>BallModel</title>
<meta name="date" content="2017-10-03">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="BallModel";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/BallModel.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../model/Ball.html" title="class in model"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../model/IBallCmd.html" title="interface in model"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?model/BallModel.html" target="_top">Frames</a></li>
<li><a href="BallModel.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">model</div>
<h2 title="Class BallModel" class="title">Class BallModel</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>model.BallModel</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="typeNameLabel">BallModel</span>
extends java.lang.Object</pre>
<div class="block">This is a Ball Model class.</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private javax.swing.JPanel</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#ballPanel">ballPanel</a></span></code>
<div class="block">ballPanel is the ball panel to draw balls.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private <a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#errorStrategyFac">errorStrategyFac</a></span></code>
<div class="block">A factory for a beeping error strategy that beeps the speaker every
 25 updates.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../util/IDispatcher.html" title="interface in util">IDispatcher</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#myDispatcher">myDispatcher</a></span></code>
<div class="block">myDispatcher is the instance of the dispatcher.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private javax.swing.Timer</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#paintTimer">paintTimer</a></span></code>
<div class="block">The timer that controls when the balls are periodically painted.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../model/updatestrategy/SwitcherUpdateStrategy.html" title="class in model.updatestrategy">SwitcherUpdateStrategy</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#switcher">switcher</a></span></code>
<div class="block">switcher strategy.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#timeSlice">timeSlice</a></span></code>
<div class="block">timeSlice is the time interval between time ticks.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private javax.swing.Timer</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#updateTimer">updateTimer</a></span></code>
<div class="block">The timer that controls when the balls are periodically updated.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private <a href="../model/IViewUpdateAdapter.html" title="interface in model">IViewUpdateAdapter</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#viewUpdateAdpt">viewUpdateAdpt</a></span></code>
<div class="block">viewUpdateAdpt is the instance of the model to view adapter.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../model/BallModel.html#BallModel-model.IViewUpdateAdapter-">BallModel</a></span>(<a href="../model/IViewUpdateAdapter.html" title="interface in model">IViewUpdateAdapter</a>&nbsp;viewUpdateAdpt)</code>
<div class="block">Constructor of BallModel.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#clearBalls--">clearBalls</a></span>()</code>
<div class="block">clearBalls method clears all balls on the panel.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code><a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#combineStrategyFacs-model.IUpdateStrategyFac-model.IUpdateStrategyFac-">combineStrategyFacs</a></span>(<a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;stratFac1,
                   <a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;stratFac2)</code>
<div class="block">Returns an IStrategyFac that can instantiate a MultiStrategy with the two
 strategies made by the two given IStrategyFac objects.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>private java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#fixPaintStrategyName-java.lang.String-">fixPaintStrategyName</a></span>(java.lang.String&nbsp;className)</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>private java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#fixStrategyName-java.lang.String-">fixStrategyName</a></span>(java.lang.String&nbsp;className)</code>&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code><a href="../model/updatestrategy/SwitcherUpdateStrategy.html" title="class in model.updatestrategy">SwitcherUpdateStrategy</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#getSwitcherStrategy--">getSwitcherStrategy</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#loadBall-model.IUpdateStrategyFac-model.IPaintStrategyFac-">loadBall</a></span>(<a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;strategyFac,
        <a href="../model/IPaintStrategyFac.html" title="interface in model">IPaintStrategyFac</a>&nbsp;paintStrategyFac)</code>
<div class="block">Create a new ball and add it to the myDispatcher.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>private <a href="../model/IPaintStrategy.html" title="interface in model">IPaintStrategy</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#loadPaintStrategy-java.lang.String-">loadPaintStrategy</a></span>(java.lang.String&nbsp;className)</code>
<div class="block">The following method returns an instance of a paint strategy,
 given a fully qualified class name (package.className) of a subclass of
 IPaintStrategy.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>private <a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#loadStrategy-java.lang.String-">loadStrategy</a></span>(java.lang.String&nbsp;className)</code>
<div class="block">The following method returns an instance of an strategy, given a fully
 qualified class name (package.className) of a subclass of IUpdateStrategy.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code><a href="../model/IPaintStrategyFac.html" title="interface in model">IPaintStrategyFac</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#makePaintStrategyFac-java.lang.String-">makePaintStrategyFac</a></span>(java.lang.String&nbsp;className)</code>
<div class="block">Returns an IPaintStrategyFac that can instantiate the paint strategy
 specified by className.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code><a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#makeStrategyFac-java.lang.String-">makeStrategyFac</a></span>(java.lang.String&nbsp;className)</code>
<div class="block">Returns an IUpdateStrategyFac that can instantiate the strategy specified
 by className.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#setPanel-javax.swing.JPanel-">setPanel</a></span>(javax.swing.JPanel&nbsp;ballPanel)</code>
<div class="block">setPanel method sets the ball panel.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#start--">start</a></span>()</code>
<div class="block">Start both timers.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#switchSwitcherStrategy-model.IUpdateStrategy-">switchSwitcherStrategy</a></span>(<a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;strategy)</code>
<div class="block">set new switcher strategy.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#update-java.awt.Graphics-">update</a></span>(java.awt.Graphics&nbsp;g)</code>
<div class="block">This method is called by IModelUpdateAdapter.paint(), and updates all
 balls' painted locations by painting all the balls onto the given Graphics
 object.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="viewUpdateAdpt">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>viewUpdateAdpt</h4>
<pre>private&nbsp;<a href="../model/IViewUpdateAdapter.html" title="interface in model">IViewUpdateAdapter</a> viewUpdateAdpt</pre>
<div class="block">viewUpdateAdpt is the instance of the model to view adapter. This ensures
 that the adapter is always valid.</div>
</li>
</ul>
<a name="myDispatcher">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>myDispatcher</h4>
<pre>private&nbsp;<a href="../util/IDispatcher.html" title="interface in util">IDispatcher</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt; myDispatcher</pre>
<div class="block">myDispatcher is the instance of the dispatcher.</div>
</li>
</ul>
<a name="timeSlice">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>timeSlice</h4>
<pre>private&nbsp;int timeSlice</pre>
<div class="block">timeSlice is the time interval between time ticks.</div>
</li>
</ul>
<a name="paintTimer">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>paintTimer</h4>
<pre>private&nbsp;javax.swing.Timer paintTimer</pre>
<div class="block">The timer that controls when the balls are periodically painted.</div>
</li>
</ul>
<a name="updateTimer">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>updateTimer</h4>
<pre>private&nbsp;javax.swing.Timer updateTimer</pre>
<div class="block">The timer that controls when the balls are periodically updated.</div>
</li>
</ul>
<a name="errorStrategyFac">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>errorStrategyFac</h4>
<pre>private&nbsp;<a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt; errorStrategyFac</pre>
<div class="block">A factory for a beeping error strategy that beeps the speaker every
 25 updates.

 Either use the errorStrategyFac variable directly if you need a factory
 that makes an error strategy, or call errorStrategyFac.make() to create
 an instance of a beeping error strategy.</div>
</li>
</ul>
<a name="switcher">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>switcher</h4>
<pre>private&nbsp;<a href="../model/updatestrategy/SwitcherUpdateStrategy.html" title="class in model.updatestrategy">SwitcherUpdateStrategy</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt; switcher</pre>
<div class="block">switcher strategy.</div>
</li>
</ul>
<a name="ballPanel">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>ballPanel</h4>
<pre>private&nbsp;javax.swing.JPanel ballPanel</pre>
<div class="block">ballPanel is the ball panel to draw balls.</div>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="BallModel-model.IViewUpdateAdapter-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>BallModel</h4>
<pre>public&nbsp;BallModel(<a href="../model/IViewUpdateAdapter.html" title="interface in model">IViewUpdateAdapter</a>&nbsp;viewUpdateAdpt)</pre>
<div class="block">Constructor of BallModel.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>viewUpdateAdpt</code> - An instance of model to view adaptor.</dd>
</dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="start--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>start</h4>
<pre>public&nbsp;void&nbsp;start()</pre>
<div class="block">Start both timers.</div>
</li>
</ul>
<a name="update-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>update</h4>
<pre>public&nbsp;void&nbsp;update(java.awt.Graphics&nbsp;g)</pre>
<div class="block">This method is called by IModelUpdateAdapter.paint(), and updates all
 balls' painted locations by painting all the balls onto the given Graphics
 object.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>g</code> - The Graphics object from the view's paintComponent() call.</dd>
</dl>
</li>
</ul>
<a name="loadBall-model.IUpdateStrategyFac-model.IPaintStrategyFac-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>loadBall</h4>
<pre>public&nbsp;void&nbsp;loadBall(<a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;strategyFac,
                     <a href="../model/IPaintStrategyFac.html" title="interface in model">IPaintStrategyFac</a>&nbsp;paintStrategyFac)</pre>
<div class="block">Create a new ball and add it to the myDispatcher.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>strategyFac</code> - ball update strategy factory</dd>
<dd><code>paintStrategyFac</code> - ball paint strategy factory</dd>
</dl>
</li>
</ul>
<a name="makeStrategyFac-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makeStrategyFac</h4>
<pre>public&nbsp;<a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;makeStrategyFac(java.lang.String&nbsp;className)</pre>
<div class="block">Returns an IUpdateStrategyFac that can instantiate the strategy specified
 by className. The toString() of the returned factory is the className.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>className</code> - Shortened name of desired strategy</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A factory to make that strategy</dd>
</dl>
</li>
</ul>
<a name="fixStrategyName-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>fixStrategyName</h4>
<pre>private&nbsp;java.lang.String&nbsp;fixStrategyName(java.lang.String&nbsp;className)</pre>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>className</code> - a input abbreviated class name</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the full class name</dd>
</dl>
</li>
</ul>
<a name="loadStrategy-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>loadStrategy</h4>
<pre>private&nbsp;<a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;loadStrategy(java.lang.String&nbsp;className)</pre>
<div class="block">The following method returns an instance of an strategy, given a fully
 qualified class name (package.className) of a subclass of IUpdateStrategy.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>className</code> - A string that is the fully qualified class name of the
                  desired object</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An instance of the supplied class. Returns a factory for a beeping
         error strategy if className is invalid.</dd>
</dl>
</li>
</ul>
<a name="combineStrategyFacs-model.IUpdateStrategyFac-model.IUpdateStrategyFac-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>combineStrategyFacs</h4>
<pre>public&nbsp;<a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;combineStrategyFacs(<a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;stratFac1,
                                                        <a href="../model/IUpdateStrategyFac.html" title="interface in model">IUpdateStrategyFac</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;stratFac2)</pre>
<div class="block">Returns an IStrategyFac that can instantiate a MultiStrategy with the two
 strategies made by the two given IStrategyFac objects. Returns null if
 either supplied factory is null. The toString() of the returned factory
 is the toString()'s of the two given factories, concatenated with "-".
 If either factory is null, then a factory for a beeping error strategy is
 returned.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>stratFac1</code> - An IUpdateStrategyFac for a strategy</dd>
<dd><code>stratFac2</code> - An IUpdateStrategyFac for a strategy</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An IUpdateStrategyFac for the composition of the two strategies</dd>
</dl>
</li>
</ul>
<a name="getSwitcherStrategy--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getSwitcherStrategy</h4>
<pre>public&nbsp;<a href="../model/updatestrategy/SwitcherUpdateStrategy.html" title="class in model.updatestrategy">SwitcherUpdateStrategy</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;getSwitcherStrategy()</pre>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>switcher strategy.</dd>
</dl>
</li>
</ul>
<a name="switchSwitcherStrategy-model.IUpdateStrategy-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>switchSwitcherStrategy</h4>
<pre>public&nbsp;void&nbsp;switchSwitcherStrategy(<a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&lt;<a href="../model/IBallCmd.html" title="interface in model">IBallCmd</a>&gt;&nbsp;strategy)</pre>
<div class="block">set new switcher strategy.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>strategy</code> - the new switcher strategy.</dd>
</dl>
</li>
</ul>
<a name="setPanel-javax.swing.JPanel-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setPanel</h4>
<pre>public&nbsp;void&nbsp;setPanel(javax.swing.JPanel&nbsp;ballPanel)</pre>
<div class="block">setPanel method sets the ball panel.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>ballPanel</code> - The panel to show the animation of balls.</dd>
</dl>
</li>
</ul>
<a name="clearBalls--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clearBalls</h4>
<pre>public&nbsp;void&nbsp;clearBalls()</pre>
<div class="block">clearBalls method clears all balls on the panel.</div>
</li>
</ul>
<a name="makePaintStrategyFac-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makePaintStrategyFac</h4>
<pre>public&nbsp;<a href="../model/IPaintStrategyFac.html" title="interface in model">IPaintStrategyFac</a>&nbsp;makePaintStrategyFac(java.lang.String&nbsp;className)</pre>
<div class="block">Returns an IPaintStrategyFac that can instantiate the paint strategy
 specified by className. The toString() of the returned factory is the
 className.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>className</code> - Shortened name of desired paint strategy</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A factory to make that paint strategy</dd>
</dl>
</li>
</ul>
<a name="fixPaintStrategyName-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>fixPaintStrategyName</h4>
<pre>private&nbsp;java.lang.String&nbsp;fixPaintStrategyName(java.lang.String&nbsp;className)</pre>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>className</code> - a input abbreviated class name</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the full class name</dd>
</dl>
</li>
</ul>
<a name="loadPaintStrategy-java.lang.String-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>loadPaintStrategy</h4>
<pre>private&nbsp;<a href="../model/IPaintStrategy.html" title="interface in model">IPaintStrategy</a>&nbsp;loadPaintStrategy(java.lang.String&nbsp;className)</pre>
<div class="block">The following method returns an instance of a paint strategy,
 given a fully qualified class name (package.className) of a subclass of
 IPaintStrategy.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>className</code> - A string that is the fully qualified class name of the
                  desired object</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An instance of the supplied class.</dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/BallModel.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../model/Ball.html" title="class in model"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../model/IBallCmd.html" title="interface in model"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?model/BallModel.html" target="_top">Frames</a></li>
<li><a href="BallModel.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
