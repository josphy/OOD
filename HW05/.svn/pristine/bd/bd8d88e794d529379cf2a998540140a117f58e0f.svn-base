package model;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.util.Observable;
import java.util.Observer;

import util.Dispatcher;

/**
 * This is a concrete ball class.
 */
public class Ball implements Observer {
  /**
   * loc is the center point of a ball.
   */
  protected Point loc;
  /**
   * radius is the radius of a ball.
   */
  protected int radius;
  /**
   * vel is the velocity of a ball which include the x-axis velocity
   * and y-axis velocity.
   */
  protected Point vel;
  /**
   * color is the color of a ball.
   */
  protected Color color;
  /**
   * canvas is the panel for the ball word.
   */
  protected Component canvas;
  /**
   * the update strategy.
   */
  protected IUpdateStrategy updateStrategy;
  /**
   * the paint strategy.
   */
  protected IPaintStrategy paintStrategy;

  /**
   * Constructor of ABall.
   * @param loc The center point of a ball.
   * @param radius The radius of a ball.
   * @param vel The velocity of a ball
   * @param color The color of a ball
   * @param canvas The panel for the ball word
   * @param updateStrategy the ball update strategy.
   * @param paintStrategy the ball paint strategy.
   */
  public Ball(Point loc, int radius, Point vel, Color color, Component canvas,
      IUpdateStrategy updateStrategy, IPaintStrategy paintStrategy) {
    this.loc = loc;
    this.radius = radius;
    this.vel = vel;
    this.color = color;
    this.canvas = canvas;
    this.updateStrategy = updateStrategy;
    this.paintStrategy = paintStrategy;
  }

  /**
   * Update the ball's state using updateStrategy.
   *
   * @param dispatcher  the dispatcher to use if needed
   */
  public void updateState(Dispatcher dispatcher) {
    updateStrategy.updateState(this, dispatcher);
  }

  /**
   * move method moves ball's location under velocity.
   */
  public void move() {
    loc.translate(vel.x, vel.y);
  }

  /**
   * This method sets the location and the velocity of the ball when it
   * touches the bounds of the ball panel.
   */
  public void bounce() {
    // check if hit left wall
    if (loc.x - radius < 0) {
      vel.x = -vel.x;
      loc.x = 2 * radius - loc.x;
    }
    // check if hit top wall
    if (loc.y - radius < 0) {
      loc.y = 2 * radius - loc.y;
      vel.y = -vel.y;
    }
    // check if hit right wall;
    if (canvas.getWidth() - loc.x - radius < 0) {
      loc.x = 2 * (canvas.getWidth() - radius) - loc.x;
      vel.x = -vel.x;
    }
    // check if hit bottom wall;
    if (canvas.getHeight() - loc.y - radius < 0) {
      loc.y = 2 * (canvas.getHeight() - radius) - loc.y;
      vel.y = -vel.y;
    }
  }

  /**
   * paint the ball with paint strategy
   *
   * @param g   the Graphics object to be painted on
   */
  public void paint(Graphics g) {
    paintStrategy.init(this);
    paintStrategy.paint(g, this);
  }

  /**
   * This method is called by the ballModel Dispatcher to notify all the balls
   * to perform the given command. The given command is executed.
   *
   * @param o     the Dispatcher that sent the update request
   * @param cmd   the IBallCmd that will be run
   */
  @Override
  public void update(Observable o, Object cmd) {
    ((IBallCmd) cmd).apply(this, (Dispatcher) o);
  }

  /**
   * @return current ball paint strategy
   */
  public IPaintStrategy getPaintStrategy() {
    return this.paintStrategy;
  }

  /**
   * set ball paint strategy.
   *
   * @param paintStrategy new ball paint strategy.
   */
  public void setPaintStrategy(IPaintStrategy paintStrategy) {
    this.paintStrategy = paintStrategy;
  }

  /**
   * @return current ball update strategy
   */
  public IUpdateStrategy getUpdateStrategy() {
    return this.updateStrategy;
  }

  /**
   * set ball update strategy.
   *
   * @param updateStrategy new ball update strategy.
   */
  public void setUpdateStrategy(IUpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
  }

  /**
   * @return current ball center location.
   */
  public Point getLocation() {
    return loc;
  }

  /**
   * set ball center location.
   *
   * @param loc new ball center location.
   */
  public void setLocation(Point loc) {
    this.loc = loc;
  }

  /**
   * @return current ball velocity.
   */
  public Point getVelocity() {
    return this.vel;
  }

  /**
   * set ball velocity.
   *
   * @param vel new ball velocity.
   */
  public void setVelocity(Point vel) {
    this.vel = vel;
  }

  /**
   * @return current ball radius.
   */
  public int getRadius() {
    return this.radius;
  }

  /**
   * set ball radius.
   *
   * @param radius new ball radius.
   */
  public void setRadius(int radius) {
    this.radius = radius;
  }

  /**
   * @return current ball color.
   */
  public Color getColor() {
    return this.color;
  }

  /**
   * set ball color.
   *
   * @param color new ball color.
   */
  public void setColor(Color color) {
    this.color = color;
  }

  /**
   * @return the canvas
   */
  public Component getCanvas() {
    return canvas;
  }

}
