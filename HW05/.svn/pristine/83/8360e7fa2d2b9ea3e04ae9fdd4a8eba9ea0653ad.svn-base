package model.updatestrategy;

import model.Ball;
import model.IUpdateStrategy;
import util.IDispatcher;

/**
 * multiple strategies: enables dynamically combined strategies.
 */
public class MultiUpdateStrategy<TDispMsg> extends AUpdateStrategy<TDispMsg> {
  /**
   * strategy 1.
   */
  private IUpdateStrategy<TDispMsg> s1;
  /**
   * strategy 2.
   */
  private IUpdateStrategy<TDispMsg> s2;

  /**
   * constructor.
   *
   * @param s1 strategy1
   * @param s2 strategy2
   */
  public MultiUpdateStrategy(IUpdateStrategy<TDispMsg> s1, IUpdateStrategy<TDispMsg> s2) {
    this.s1 = s1;
    this.s2 = s2;
  }

  /**
   * update state the ball of context.
   *
   * @param context the context
   */
  @Override
  public void updateState(Ball context, IDispatcher<TDispMsg> dispatcher) {
    s1.updateState(context, dispatcher);
    s2.updateState(context, dispatcher);
  }

}
