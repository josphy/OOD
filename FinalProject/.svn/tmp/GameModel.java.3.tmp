package game.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

import common.ICRCmd2ModelAdapter;
import common.IReceiver;
import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.render.Annotation;
import gov.nasa.worldwind.render.GlobeAnnotation;
import map.MapLayer;
import map.ToggleAnnotation;
import game.data.ChooseStateData;
import game.data.fengDraft_State;

/**
 * Game Model
 * 
 * feng's notice: some implementation may conflict with server model part. 
 */
public class GameModel {

	/**
	 * adapter to game view
	 */
	private IGameModel2ViewAdapter viewAdpt = null;
	
	private IReceiver serverStub;
	
//	private IReceiver clientStub;
		
	private ICRCmd2ModelAdapter clientModelAdpt;
	
	private Stack<String> states = new Stack<String>();
	
	//private ArrayList<ToggleAnnotation> stateAnnos = new ArrayList<ToggleAnnotation>();
	
	private MapLayer annotations = new MapLayer();
	
	private Map<Annotation, String> annotationMap= new HashMap<Annotation, String>();
	
	/**
	 * Record the score of the team. 
	 */
	private double teamScore = 0; // feng's notice: not sure if score needed here. For now just show the logic
	
	/**
	 * The name of desired state
	 */
	private String targetState = null;
	
	/**
	 * Selected annotation of team for the question
	 */
	private Annotation selectedAnno = null;
	
	/**
	 * Temporarily put start function on the game side instead of server
	 * If the game has started?
	 */
	private boolean started;

	/**
	 * constructor
	 * @param adapter externally provided adapter to view
	 */
	public GameModel(IReceiver serverStub, ICRCmd2ModelAdapter clientModelAdpt, IGameModel2ViewAdapter viewAdpt) {
		this.serverStub = serverStub;
		this.clientModelAdpt = clientModelAdpt;
		this.viewAdpt = viewAdpt;
	}	
	
	/**
	 * start the game model
	 */
	public void start() {
		System.out.println("game model start");
		loadStateNames();
		loadToggleAnnotations();
		
//		Position willy = Position.fromDegrees(29.718550, -95.399068, 150);
//		Position epcot = Position.fromDegrees(28.374454, -81.549363, 1000);
//		Position nyc   = Position.fromDegrees(40.748974, -73.990288, 10000);
//		
//		annotations.addToggleAnnotation("Willy", "Willy Selected!", willy);
//		annotations.addToggleAnnotation("Epcot Center", "Epcot Selected!", epcot, 5000, 1000000);
//		annotations.addAnnotation(new GlobeAnnotation("NYC", nyc));
		
		Set<Annotation> states = annotationMap.keySet();
		for (Annotation state:states) {
			annotations.addAnnotation(state);
		}
		
		viewAdpt.showLayer(annotations);
		
		viewAdpt.showScore(teamScore);
		
		viewAdpt.showStateName(targetState);
		
		viewAdpt.showInstruction("INSTRUCTIONS:\nThere are a couple of annotations on the wap, each one represents a US state.\n"
								+ "To start the game, please click \"Start\" button\n"
								+ "After the game has stated, one state name will show up on the panel. After reaching a final decision inside your team, " 
								+ "please click the annotation which is inside the state which corresponds to the give state name.\n"
								+ "Warning: Please do not click any annotation if your team has not made decision yet.\n"
								+ "If your team gets the right answer, your team will get bonus score.\n"
								+ "After answering current question, please click \"next\" button to get next question.\n"
								+ "After all teams are finished with all the questions, the game is over. The team with the highest score will be the winner\n"
				);
	}
	
	/**
	 * The method to count selected markers
	 * @return the one selected marker; if selected more than one, return null
	 */
	public Annotation getOneSelected() {
		int numberOfSelected = 0;
		Annotation selected = null;
		for (Annotation annotation: annotations.getAnnotations()) {
			if (annotation instanceof ToggleAnnotation){  // must check this before GlobeAnnotation
				if (((ToggleAnnotation) annotation).isSelected()) {
					numberOfSelected++;
					selected = annotation;
				}
			}
		}
		if (numberOfSelected == 1)
			return selected;
		else
			return null;
	}

	public boolean submitToServer() {
		System.out.println("clicked submit");
		Annotation selected = getOneSelected();
		if (selected == null)
			return false;
		
//		annotations.removeAnnotation(selected); 
		//send selection to server
		String stateName = annotationMap.get(selected);
		clientModelAdpt.sendTo(serverStub, ChooseStateData.class, new ChooseStateData(stateName, selected));
		((ToggleAnnotation) selected).toggleText();
		return true;
		
	}
	
	/**
	 * feng's personal thoughts: game has been simplified. The process of each team's game is independent of each other. 
	 * No matter if team got the right answer or not, we will proceed to next question. 
	 */
	public void startGame() {
		if (started) {
			return;
		}
		started = true;
		
		/**
		 * Extract one state name from the stack. 
		 */
		targetState = states.pop();
		
		/**
		 * Show the desired state name in the GUI
		 */
		viewAdpt.showStateName(targetState);
		
		/**
		 *  Use a loop to detect any annotation has been selected.
		 */
		while (true) {
			selectedAnno = getOneSelected();
			if (selectedAnno != null) {
				break;
			}
		}
		
		
		checkAnswer(annotationMap.get(selectedAnno), targetState);
		
		// set selectedAnno to null for next question
		selectedAnno = null;
		viewAdpt.showScore(teamScore);
	}
	
	/**
	 * just show the logic, may conflict with server 
	 * @param answer the choice of the team 
	 * @param target right answer
	 */
	public void checkAnswer(String answer, String target) {
		if (answer.equals(target)){
			teamScore += 5;
		}
		else {
			teamScore -= 2;
		}
	}
	
	/**
	 * Press "Next" button on the GUI, move on to next question
	 */
	public void proceedToNextState() {
		if (!started) {
			// start the game first
		}
		else if (states.isEmpty()){
			// The team has finished the game
		}
		else {
			// display new state name on view, update the score after answering
			targetState = states.pop();
			viewAdpt.showStateName(targetState);
			while (true) {
				selectedAnno = getOneSelected();
				if (selectedAnno != null) {
					break;
				}
			}
			checkAnswer(annotationMap.get(selectedAnno), targetState);
			selectedAnno = null;
			viewAdpt.showScore(teamScore);
		}
	}
	
	/*
	 * feng's personal thoughts: use stack to pop up question on the GUI
	 */
	public void loadStateNames() {

		states.push("Texas");
		states.push("California");
		states.push("Alabama");
		states.push("Tennessee");
		
		states.push("Pennsylvania"); 
		states.push("Ohio");
		states.push("Illinois");
		states.push("Virginia");
		
		states.push("Indiana");
		states.push("Massachusetts");
		states.push("Oklahoma"); 
		states.push("Arizona");
		
		states.push("Florida");
		states.push("Colorado");
		states.push("Louisiana");
		states.push("Kentucky");
		
		states.push("Missouri");
		states.push("Georgia");
		states.push("South Dakota");
		states.push("Wisconsin");
		
		states.push("Utah");
		states.push("Kansas");
		states.push("New Mexico");
		states.push("Conneticut");
		
		states.push("Michigan");
		states.push("New Hampshire");
		states.push("Wyoming");
		states.push("Oregon");
		
		states.push("New Jersey");
		states.push("Maryland");
		states.push("North Carolina");
		states.push("West Virginia");
		
		states.push("Minnesota");
		states.push("Mississippi");
		states.push("Washington");
		states.push("North Dakota");
		
		states.push("South Carolina");
		states.push("Iowa");
		states.push("Maine");
		states.push("Nevada");
		
		states.push("New York");
	}
	
	public void loadToggleAnnotations() {
		
		String tip = "Sure to choose this state?";
		
		ToggleAnnotation Oklahoma = new ToggleAnnotation("1", tip, Position.fromDegrees(35.000, -98.000));
		annotationMap.put(Oklahoma, "Oklahoma");
		
		ToggleAnnotation Pennsylvania = new ToggleAnnotation("2", tip, Position.fromDegrees(40.000, -77.000));
		annotationMap.put(Pennsylvania, "Pennsylvania");
		
		ToggleAnnotation sDakota = new ToggleAnnotation("3", tip, Position.fromDegrees(43.500, -100.000));
		annotationMap.put(sDakota, "South Dakota");
		
		ToggleAnnotation nHampshire = new ToggleAnnotation("4", tip, Position.fromDegrees(43.5, -71.000));
		annotationMap.put(nHampshire, "New Hampshire");
		
		ToggleAnnotation wVirginia = new ToggleAnnotation("5", tip, Position.fromDegrees(38.500, -80.000));
		annotationMap.put(wVirginia, "West Virginia");
		
		ToggleAnnotation nJersey = new ToggleAnnotation("6", tip, Position.fromDegrees(40.000, -74.000));
		annotationMap.put(nJersey, "New Jersey");
		
		ToggleAnnotation nDakota = new ToggleAnnotation("7", tip, Position.fromDegrees(47.000, -100.000));
		annotationMap.put(nDakota, "North Dakota");
		
		ToggleAnnotation Nevada = new ToggleAnnotation("8", tip, Position.fromDegrees(38.500, -117.000));
		annotationMap.put(Nevada, "Nevada");
		
		ToggleAnnotation Mississippi = new ToggleAnnotation("9", tip, Position.fromDegrees(33.000, -90.000));
		annotationMap.put(Mississippi, "Mississippi");
		
		ToggleAnnotation Colorado = new ToggleAnnotation("10", tip, Position.fromDegrees(39.000, -105.000));
		annotationMap.put(Colorado, "Colorado");
		
		ToggleAnnotation Missouri = new ToggleAnnotation("11", tip, Position.fromDegrees(38.000, -90.000));
		annotationMap.put(Missouri, "Missouri");
		
		ToggleAnnotation California = new ToggleAnnotation("12", tip, Position.fromDegrees(37.000, -119.000));
		annotationMap.put(California, "California");
		
		ToggleAnnotation Illinois = new ToggleAnnotation("13", tip, Position.fromDegrees(39.000, -89.000));
		annotationMap.put(Illinois, "Illinois");
		
		ToggleAnnotation Florida = new ToggleAnnotation("14", tip, Position.fromDegrees(27.000, -83.5000));
		annotationMap.put(Florida, "Florida");
		
		ToggleAnnotation nMexico = new ToggleAnnotation("15", tip, Position.fromDegrees(34.000, -106.000));
		annotationMap.put(nMexico, "New Mexico");
		
		ToggleAnnotation Utah = new ToggleAnnotation("16", tip, Position.fromDegrees(40.000, -111.5));
		annotationMap.put(Utah, "Utah");
		
		ToggleAnnotation Iowa = new ToggleAnnotation("17", tip, Position.fromDegrees(41.500, -93.000));
		annotationMap.put(Iowa, "Iowa");
		
		ToggleAnnotation Michigan = new ToggleAnnotation("18", tip, Position.fromDegrees(44.500, -82.000));
		annotationMap.put(Michigan, "Michigan");
		
		ToggleAnnotation Kentucky = new ToggleAnnotation("19", tip, Position.fromDegrees(37.000, -85.000));
		annotationMap.put(Kentucky, "Kentucky");
		
		ToggleAnnotation Tennessee = new ToggleAnnotation("20", tip, Position.fromDegrees(35.000, -85.000));
		annotationMap.put(Tennessee, "Tennessee");
		
		ToggleAnnotation Indiana = new ToggleAnnotation("21", tip, Position.fromDegrees(39.000, -86.000));
		annotationMap.put(Indiana, "Indiana");
		
		ToggleAnnotation Arizona = new ToggleAnnotation("22", tip, Position.fromDegrees(34.000, -111.000));
		annotationMap.put(Arizona, "Arizona");
		
		ToggleAnnotation Oregon = new ToggleAnnotation("23", tip, Position.fromDegrees(44.000, -120.000));
		annotationMap.put(Oregon, "Oregon");
		
		ToggleAnnotation Washington = new ToggleAnnotation("24", tip, Position.fromDegrees(47.000, -120.000));
		annotationMap.put(Washington, "Washington");
		
		ToggleAnnotation Maryland = new ToggleAnnotation("25", tip, Position.fromDegrees(38.000, -77.000));
		annotationMap.put(Maryland, "Maryland");
		
		ToggleAnnotation Minnesota = new ToggleAnnotation("26", tip, Position.fromDegrees(46.000, -93.000));
		annotationMap.put(Minnesota, "Minnesota");
		
		ToggleAnnotation nYork = new ToggleAnnotation("27", tip, Position.fromDegrees(43.000, -75.000));
		annotationMap.put(nYork, "New York");
		
		ToggleAnnotation Maine = new ToggleAnnotation("28", tip, Position.fromDegrees(44.000, -69.000));
		annotationMap.put(Maine, "Maine");
		
		ToggleAnnotation sCarolina = new ToggleAnnotation("29", tip, Position.fromDegrees(32.500, -86.000));
		annotationMap.put(sCarolina, "South Carolina");
		
		ToggleAnnotation Texas = new ToggleAnnotation("30", tip, Position.fromDegrees(30.000, -99.000));
		annotationMap.put(Texas, "Texas");
		
		ToggleAnnotation Georgia = new ToggleAnnotation("31", tip, Position.fromDegrees(32.000, -82.000));
		annotationMap.put(Georgia, "Georgia");
		
		ToggleAnnotation Louisiana = new ToggleAnnotation("32", tip, Position.fromDegrees(30.000, -91.000));
		annotationMap.put(Louisiana, "Louisiana");
		
		ToggleAnnotation Wisconsin = new ToggleAnnotation("33", tip, Position.fromDegrees(45.000, -89.000));
		annotationMap.put(Wisconsin, "Wisconsin");
		
		ToggleAnnotation Conneticut = new ToggleAnnotation("34", tip, Position.fromDegrees(41.000, -72.000));
		annotationMap.put(Conneticut, "Conneticut");
		
		ToggleAnnotation Wyoming = new ToggleAnnotation("35", tip, Position.fromDegrees(43.000, -107.000));
		annotationMap.put(Wyoming, "Wyoming");
		
		ToggleAnnotation Kansas = new ToggleAnnotation("36", tip, Position.fromDegrees(38.500, -98.000));
		annotationMap.put(Kansas, "Kansas");
		
		ToggleAnnotation nCarolina = new ToggleAnnotation("37", tip, Position.fromDegrees(35.000, -80.000));
		annotationMap.put(nCarolina, "North Carolina");
		
		ToggleAnnotation Ohio = new ToggleAnnotation("38", tip, Position.fromDegrees(40.000, -82.000));
		annotationMap.put(Ohio, "Ohio");
		
		ToggleAnnotation Massachusetts = new ToggleAnnotation("39", tip, Position.fromDegrees(42.000, -71.000));
		annotationMap.put(Massachusetts, "Massachusetts");
		
		ToggleAnnotation Alabama = new ToggleAnnotation("40", tip, Position.fromDegrees(32.500, -86.000));
		annotationMap.put(Alabama, "Alabama");
		
		ToggleAnnotation Virginia = new ToggleAnnotation("41", tip, Position.fromDegrees(37.000, -79.000));
		annotationMap.put(Virginia, "Virginia");
		
	}
	
}
