package server.model;

import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import common.DataPacketCR;
import common.DataPacketCRAlgoCmd;
import common.DataPacketUser;
import common.DataPacketUserAlgoCmd;
import common.ICRCmd2ModelAdapter;
import common.ICRMessageType;
import common.IChatRoom;
import common.IComponentFactory;
import common.IReceiver;
import common.IUser;
import common.IUserCmd2ModelAdapter;
import common.IUserMessageType;
import common.datatype.IRequestCmdType;
import common.datatype.chatroom.IAddReceiverType;
import common.datatype.chatroom.ICRExceptionStatusType;
import common.datatype.chatroom.ICRInstallCmdType;
import common.datatype.chatroom.ICRRejectionStatusType;
import common.datatype.chatroom.IRemoveReceiverType;
import common.datatype.user.IInvitationType;
import common.datatype.user.IQuitType;
import common.datatype.user.IUserExceptionStatusType;
import common.datatype.user.IUserInstallCmdType;
import common.datatype.user.IUserRejectionStatusType;
import concrete.ChatRoom;
import concrete.Receiver;
import concrete.Server;
import concrete.User;
import concrete.data.RequestCmdData;
import concrete.data.chatroom.AddReceiverData;
import concrete.data.chatroom.CRExceptionStatusCmd;
import concrete.data.chatroom.CRExceptionStatusData;
import concrete.data.chatroom.CRInstallCmdData;
import concrete.data.chatroom.CRRejectionStatusCmd;
import concrete.data.chatroom.CRRejectionStatusData;
import concrete.data.chatroom.ImageIconCmd;
import concrete.data.chatroom.ImageMessageData;
import concrete.data.chatroom.TextMessageCmd;
import concrete.data.chatroom.TextMessageData;
import concrete.data.user.UserExceptionStatusCmd;
import concrete.data.user.UserRejectionStatusCmd;
import game.data.GameFactory;
import game.data.GameStartCmd;
import game.data.GameStartData;
import game.data.IGameMsgType;
import provided.datapacket.DataPacketAlgo;
import provided.mixedData.MixedDataDictionary;
import provided.mixedData.MixedDataKey;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;
import provided.util.IVoidLambda;

public class ServerModel {

	private IServerModel2ViewAdapter viewAdpt;

	private RMIUtils rmiUtils;

	private Registry registry;

	private Server server;

	private IUser serverStub;

	private Receiver receiver;

	private IReceiver receiverStub;

	private DataPacketAlgo<String, String> dataPacketAlgoUser;

	private DataPacketAlgo<String, String> dataPacketAlgoCR;

	/**
	 * store packets of unknown type for later execution
	 */
	private Map<Class<?>, Set<DataPacketCR<?>>> unknownDataPackets = new HashMap<>();

	private MixedDataDictionary dict;

	private ChatRoom lobby;

	private Map<Integer, ChatRoom> teams;

	/**
	 * Command used to output strings to one or more destinations. By default,
	 * output goes to standard error.
	 */
	private IVoidLambda<String> outputCmd = new IVoidLambda<String>() {
		public void apply(String... msgs) {
			for (String s : msgs) {
				viewAdpt.append(s + '\n');
			}
		}
	};

	public ServerModel(IServerModel2ViewAdapter viewAdpt) {
		this.viewAdpt = viewAdpt;
		this.rmiUtils = new RMIUtils(outputCmd);
		this.dataPacketAlgoUser = new DataPacketAlgo<String, String>(null);
		this.dataPacketAlgoCR = new DataPacketAlgo<String, String>(null);
		initDataPacketAlgo();
	}

	private ICRCmd2ModelAdapter cmd2ModelAdpt_CR = new ICRCmd2ModelAdapter() {

		@Override
		public String getName() {
			return "LOBBY";
		}

		@Override
		public void appendMsg(String text, String name) {
			viewAdpt.append(name + ": " + text);
		}

		@Override
		public void buildScrollableComponent(IComponentFactory fac, String label) {
			// TODO Auto-generated method stub

		}

		@Override
		public void buildNonScrollableComponent(IComponentFactory fac, String label) {
			// TODO Auto-generated method stub

		}

		@Override
		public <T> T put(MixedDataKey<T> key, T value) {
			return dict.put(key, value);
		}

		@Override
		public <T> T get(MixedDataKey<T> key) {
			return dict.get(key);
		}

		@Override
		public <T extends ICRMessageType> void sendTo(IReceiver target, Class<T> id, T data) {
			// TODO Auto-generated method stub

		}

		@Override
		public <T extends ICRMessageType> void sendToChatRoom(Class<T> id, T data) {
			// TODO Auto-generated method stub

		}

	};

	private IUserCmd2ModelAdapter cmd2ModelAdpt_User = new IUserCmd2ModelAdapter() {

		@Override
		public String getName() {
			return "SERVER";
		}

		@Override
		public void appendMsg(String text, String name) {
			viewAdpt.append("USER " + name + ": " + text);
		}

		@Override
		public void buildScrollableComponent(IComponentFactory fac, String label) {
			// TODO Auto-generated method stub

		}

		@Override
		public void buildNonScrollableComponent(IComponentFactory fac, String label) {
			// TODO Auto-generated method stub

		}

		@Override
		public <T> T put(MixedDataKey<T> key, T value) {
			return dict.put(key, value);
		}

		@Override
		public <T> T get(MixedDataKey<T> key) {
			return dict.get(key);
		}

		@Override
		public <T extends IUserMessageType> void sendTo(IUser target, Class<T> id, T data) {
			try {
				target.receive(new DataPacketUser<T>(id, data, serverStub));
			} catch (RemoteException e) {
				System.err.println("exception sending message in userCmd2ModelAdapter:\n" + e);
				e.printStackTrace();
			}
		}

	};

	public void start() {
		try {
			rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_SERVER);
			registry = rmiUtils.getLocalRegistry();
		} catch (Exception e) {
			System.err.println("Exception while intializing RMI: \n" + e);
			e.printStackTrace();
		}

		try {
			server = new Server(UUID.randomUUID(), "GameServer");
			serverStub = (IUser) UnicastRemoteObject.exportObject(server, IRMI_Defs.CLASS_SERVER_PORT_SERVER + 1);
			server.setStub(serverStub);
			registry.rebind(IUser.BOUND_NAME, serverStub);
			viewAdpt.append("Game Server bound to \"" + IUser.BOUND_NAME + "\"\n");
		} catch (Exception e) {
			System.err.println("Server Exception: " + e);
			e.printStackTrace();
		}

		// create lobby
		lobby = new ChatRoom(UUID.randomUUID(), "LOBBY");
		viewAdpt.append("Server created lobby chat room.\n");
		server.addChatRoom(lobby);
		server.setLobby(lobby);

		// create receiver stub and join lobby
		receiver = new Receiver(UUID.randomUUID(), serverStub);
		receiver.setDataPacketAlgo(dataPacketAlgoCR);
		viewAdpt.append("Make new Receiver for game server.\n");
		try {
			receiverStub = (IReceiver) UnicastRemoteObject.exportObject(receiver,
					IRMI_Defs.CLASS_SERVER_PORT_SERVER + 1);
			registry.rebind(lobby.getName(), receiverStub);
			lobby.addIReceiverStub(receiverStub);
		} catch (RemoteException e) {
			System.err.println("exception creating receiver stub for server");
			e.printStackTrace();
		}
	}

	public void sendGame() {
		GameFactory fac = new GameFactory(receiverStub);
		GameStartData msg = new GameStartData(fac);
		lobby.sendPacket(new DataPacketCR<GameStartData>(GameStartData.class, msg, receiverStub));
		viewAdpt.append("sent game to LOBBY\n");
	}

	public void initDataPacketAlgo() {
		initDataPacketAlgoCR();
		initDataPacketAlgoUser();
	}

	public void initDataPacketAlgoCR() {

		/**
		 * unknown message type goes to default command
		 */
		dataPacketAlgoCR.setDefaultCmd(new DataPacketCRAlgoCmd<ICRMessageType>() {

			private static final long serialVersionUID = -7935877124304940055L;

			@Override
			public String apply(Class<?> index, DataPacketCR<ICRMessageType> host, String... params) {
				System.out.println("unknown chat room data packet type " + index.toString());

				if (unknownDataPackets.containsKey(index)) {
					unknownDataPackets.get(index).add(host);
				} else {
					Set<DataPacketCR<?>> values = new HashSet<DataPacketCR<?>>();
					values.add(host);
					unknownDataPackets.put(index, values);
				}

				(new Thread() {
					public void run() {
						super.run();
						try {
							host.getSender().receive(new DataPacketCR<IRequestCmdType>(IRequestCmdType.class,
									new RequestCmdData(index), receiverStub));
						} catch (RemoteException e) {
							System.err.println("Exception sending command request: \n" + e);
							e.printStackTrace();
						}

					}
				}).start();

				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICRCmd2ModelAdapter cmd2ModelAdpt) {
			}

		});

		dataPacketAlgoCR.setCmd(IAddReceiverType.class, new DataPacketCRAlgoCmd<IAddReceiverType>() {

			private static final long serialVersionUID = 6966687911909827199L;

			@Override
			public String apply(Class<?> index, DataPacketCR<IAddReceiverType> host, String... params) {
				try {
					// check receiver stub in the data packet
					IReceiver stub = host.getData().getReceiverStub();
					System.out.println("received add receiver message");
					// server does not echo\
					lobby.addIReceiverStub(stub);
					cmd2ModelAdpt_CR.appendMsg(" has joined the room!", stub.getUserStub().getName());

				} catch (RemoteException e) {
					try {
						host.getSender().receive(new DataPacketCR<ICRRejectionStatusType>(ICRRejectionStatusType.class,
								new CRRejectionStatusData(host, e.getMessage()), receiverStub));
					} catch (RemoteException e1) {
						System.err.println("Exception sending rejection: \n" + e1);
						e1.printStackTrace();
					}
					e.printStackTrace();
				}
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICRCmd2ModelAdapter cmd2ModelAdpt) {
			}
		});

		dataPacketAlgoCR.setCmd(IRemoveReceiverType.class, new DataPacketCRAlgoCmd<IRemoveReceiverType>() {

			private static final long serialVersionUID = -7144544693151711678L;

			@Override
			public String apply(Class<?> index, DataPacketCR<IRemoveReceiverType> host, String... params) {
				lobby.removeIReceiverStub(host.getData().getReceiverStub());
				try {
					cmd2ModelAdpt_CR.appendMsg(" has left the room!",
							host.getData().getReceiverStub().getUserStub().getName());
				} catch (RemoteException e) {
					System.err.println("Exception while removing receiver: \n" + e);
					e.printStackTrace();
				}
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICRCmd2ModelAdapter cmd2ModelAdpt) {
			}
		});

		dataPacketAlgoCR.setCmd(IRequestCmdType.class, new DataPacketCRAlgoCmd<IRequestCmdType>() {

			private static final long serialVersionUID = -7144544693151711678L;

			@Override
			public String apply(Class<?> index, DataPacketCR<IRequestCmdType> host, String... params) {
				System.out.println("receive request for cmd");
				if (dataPacketAlgoCR.getCmd(host.getData().getCmdId()) == null) {
					try {
						host.getSender().receive(new DataPacketCR<ICRExceptionStatusType>(ICRExceptionStatusType.class,
								new CRExceptionStatusData(host, "no corresponding command"), receiverStub));
					} catch (RemoteException e) {
						System.err.println("Exception sending exception failure: \n" + e);
						e.printStackTrace();
					}
					return null;
				}

				try {
					host.getSender()
							.receive(new DataPacketCR<ICRInstallCmdType>(ICRInstallCmdType.class,
									new CRInstallCmdData(
											(DataPacketCRAlgoCmd<?>) dataPacketAlgoCR.getCmd(host.getData().getCmdId()),
											host.getData().getCmdId()),
									receiverStub));
				} catch (RemoteException e) {
					System.err.println("Exception installing requested command: \n" + e);
					e.printStackTrace();
				}
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICRCmd2ModelAdapter cmd2ModelAdpt) {
			}
		});

		dataPacketAlgoCR.setCmd(ICRInstallCmdType.class, new DataPacketCRAlgoCmd<ICRInstallCmdType>() {

			private static final long serialVersionUID = -7144544693151711678L;

			@Override
			public String apply(Class<?> index, DataPacketCR<ICRInstallCmdType> host, String... params) {
				System.out.println("receive cmd to install in chat room");
				DataPacketCRAlgoCmd<?> unknownCmd = host.getData().getCmd();
				unknownCmd.setCmd2ModelAdpt(cmd2ModelAdpt_CR);
				dataPacketAlgoCR.setCmd(host.getData().getCmdId(), unknownCmd);
				Set<DataPacketCR<?>> executables = unknownDataPackets.remove(host.getData().getCmdId());
				for (DataPacketCR<?> executable : executables) {
					executable.execute(dataPacketAlgoCR, params);
				}
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICRCmd2ModelAdapter cmd2ModelAdpt) {
			}
		});

		CRExceptionStatusCmd exceptionCmd = new CRExceptionStatusCmd();
		exceptionCmd.setCmd2ModelAdpt(cmd2ModelAdpt_CR);
		dataPacketAlgoCR.setCmd(ICRExceptionStatusType.class, exceptionCmd);

		CRRejectionStatusCmd rejectionCmd = new CRRejectionStatusCmd();
		exceptionCmd.setCmd2ModelAdpt(cmd2ModelAdpt_CR);
		dataPacketAlgoCR.setCmd(ICRRejectionStatusType.class, rejectionCmd);

		/**
		 * predefined commands for text and image
		 */
		TextMessageCmd stringCmd = new TextMessageCmd();
		stringCmd.setCmd2ModelAdpt(cmd2ModelAdpt_CR);
		dataPacketAlgoCR.setCmd(TextMessageData.class, stringCmd);

		ImageIconCmd imageIconCmd = new ImageIconCmd();
		imageIconCmd.setCmd2ModelAdpt(cmd2ModelAdpt_CR);
		dataPacketAlgoCR.setCmd(ImageMessageData.class, imageIconCmd);

		/**
		 * install game specific commands
		 */
		GameStartCmd gameStartCmd = new GameStartCmd();
		gameStartCmd.setCmd2ModelAdpt(cmd2ModelAdpt_CR);
		dataPacketAlgoCR.setCmd(GameStartData.class, gameStartCmd);

	}

	public void initDataPacketAlgoUser() {
		/**
		 * unknown message type goes to default command
		 */
		dataPacketAlgoUser.setDefaultCmd(new DataPacketUserAlgoCmd<IUserMessageType>() {

			private static final long serialVersionUID = -7935877124304940055L;

			@Override
			public String apply(Class<?> index, DataPacketUser<IUserMessageType> host, String... params) {
				// do not accept unknown data packet at user level
				System.out.println("ignored unknown user data packet type " + index.toString());
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(IUserCmd2ModelAdapter cmd2ModelAdpt) {
			}
		});

		dataPacketAlgoUser.setCmd(IUserInstallCmdType.class, new DataPacketUserAlgoCmd<IUserInstallCmdType>() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 2584816089372155760L;

			@Override
			public String apply(Class<?> index, DataPacketUser<IUserInstallCmdType> host, String... params) {
				System.out.println("ignored user install cmd message: " + host.getData().getCmdId().toString());
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(IUserCmd2ModelAdapter cmd2ModelAdpt) {
			}
		});

		dataPacketAlgoUser.setCmd(IInvitationType.class, new DataPacketUserAlgoCmd<IInvitationType>() {

			private static final long serialVersionUID = -1077314443648529256L;

			@Override
			public String apply(Class<?> index, DataPacketUser<IInvitationType> host, String... params) {
				System.out.println("ignored invitation to room:" + host.getData().getChatRoom().getName());
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(IUserCmd2ModelAdapter cmd2ModelAdpt) {
			}
		});

		dataPacketAlgoUser.setCmd(IQuitType.class, new DataPacketUserAlgoCmd<IQuitType>() {

			private static final long serialVersionUID = -5132083404368159574L;

			@Override
			public String apply(Class<?> index, DataPacketUser<IQuitType> host, String... params) {
				server.removeUser(host.getData().getUserStub());
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(IUserCmd2ModelAdapter cmd2ModelAdpt) {
			}

		});

		UserExceptionStatusCmd exceptionCmd = new UserExceptionStatusCmd();
		exceptionCmd.setCmd2ModelAdpt(cmd2ModelAdpt_User);
		dataPacketAlgoUser.setCmd(IUserExceptionStatusType.class, exceptionCmd);

		UserRejectionStatusCmd rejectionCmd = new UserRejectionStatusCmd();
		exceptionCmd.setCmd2ModelAdpt(cmd2ModelAdpt_User);
		dataPacketAlgoUser.setCmd(IUserRejectionStatusType.class, rejectionCmd);

	}

}
