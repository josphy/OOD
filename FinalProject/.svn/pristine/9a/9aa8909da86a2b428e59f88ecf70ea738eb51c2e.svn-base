package game.view;

import java.awt.BorderLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import map.MapLayer;
import map.MapPanel;

import javax.swing.JTextArea;
import javax.swing.JTextField;

import java.awt.Component;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 * Game view
 */
public class GameView extends JFrame {

	/**
	 * auto generated UID
	 */
	private static final long serialVersionUID = 5179876899323256723L;

	private JPanel contentPane;
	private final JPanel pnlDisplay = new JPanel();
	private final JPanel pnlControl = new JPanel();
	// private final JSplitPane splitPane = new JSplitPane();
	// private final JPanel pnlDialog = new JPanel();
	private final MapPanel map = new MapPanel();

	/**
	 * adapter to game model
	 */
	private IGameView2ModelAdapter modelAdpt = null;
	private final JButton btnSubmit = new JButton("Submit");
	
	/**
	 * Personally, I put state game button in the game view.
	 */
	private final JButton btnStart = new JButton("Start");
	
	private final JButton btnNext = new JButton("Next Question");
	
	private final JLabel lblScore = new JLabel("Score:");
	
	private final JTextField textScore = new JTextField();
	
	private final JTextArea gameInstruction = new JTextArea();
	
	private final JLabel lblQuestion = new JLabel("Question:");
	
	private final JTextField textQuestion = new JTextField();
	

	/**
	 * start the game view
	 */
	public void start() {
		map.start();
		System.out.println("started view");
		// setVisible(true);
	}

	/**
	 * Create the frame.
	 * 
	 * @param adapter
	 *            externally provided adapter to game model
	 */
	public GameView(IGameView2ModelAdapter adapter) {
		this.modelAdpt = adapter;
		initGUI();
	}

	private void initGUI() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);

		contentPane.add(pnlDisplay, BorderLayout.CENTER);
		map.setPreferredSize(new java.awt.Dimension(600, 300));
		pnlDisplay.setLayout(new BorderLayout(0, 0));
		pnlDisplay.add(map);
		
		// pnlDialog.setBackground(Color.WHITE);
		// splitPane.setLeftComponent(pnlDialog);
		// splitPane.setRightComponent(map);

		contentPane.add(pnlControl, BorderLayout.SOUTH);
		pnlControl.add(btnSubmit);
		btnSubmit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (!modelAdpt.submitAnswer())
					alert("Submission failed. Please select exactly one state.");
			}
		});
		
//		pnlControl.add(btnStart);
//		btnStart.addActionListener(new ActionListener() {
//			public void actionPerformed(ActionEvent e) {
//				modelAdpt.startGame();
//			}
//		});
//		
//		pnlControl.add(lblQuestion);
//		pnlControl.add(textQuestion);
//		
//		pnlControl.add(btnNext);
//		btnNext.addActionListener(new ActionListener() {
//			public void actionPerformed(ActionEvent e) {
//				modelAdpt.proceedToNextState();
//			}
//		});
//		
//		pnlControl.add(lblScore);
//		pnlControl.add(textScore);
//		
//		pnlControl.add(gameInstruction);
	}

	public Component getView() {
		return contentPane;
	}

	public void addMapLayer(MapLayer layer) {
		map.addLayer(layer);
	}

	/**
	 * Pop up an alert window on the screen to show some messages
	 * 
	 * @param msg
	 *            The message to be shown on the screen
	 */
	public void alert(String msg) {
		JOptionPane.showMessageDialog(null, msg);
	}
	
	public void showInstruction(String ins) {
		gameInstruction.append(ins);
	}
	
	public void showScore(double score) {
		textScore.setText(Double.toString(score));
	}
	
	public void showStateName(String name) {
		textQuestion.setText(name);
	}

}
