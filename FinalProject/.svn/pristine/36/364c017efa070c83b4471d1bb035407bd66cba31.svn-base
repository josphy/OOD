package server.model;

import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Map;
import java.util.UUID;

import common.DataPacketCR;
import common.ICRCmd2ModelAdapter;
import common.IReceiver;
import common.IUser;
import concrete.ChatRoom;
import concrete.Receiver;
import concrete.User;
import game.data.GameFactory;
import game.data.GameStartData;
import provided.mixedData.MixedDataDictionary;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;
import provided.util.IVoidLambda;

public class ServerModel {

	private IServerModel2ViewAdapter viewAdpt;

	private ICRCmd2ModelAdapter cmd2ModelAdpt;

	private RMIUtils rmiUtils;

	private Registry registry;

	private User server;

	private IUser serverStub;
	
	private IReceiver receiverStub;

	private MixedDataDictionary dict;

	private ChatRoom lobby;

	private Map<Integer, ChatRoom> teams;

	/**
	 * Command used to output strings to one or more destinations. By default,
	 * output goes to standard error.
	 */
	private IVoidLambda<String> outputCmd = new IVoidLambda<String>() {
		public void apply(String... msgs) {
			for (String s : msgs) {
				viewAdpt.append(s + '\n');
			}
		}
	};

	public ServerModel(IServerModel2ViewAdapter viewAdpt) {
		this.viewAdpt = viewAdpt;
		this.rmiUtils = new RMIUtils(outputCmd);
	}

	public void start() {
		try {
			rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_SERVER);
			registry = rmiUtils.getLocalRegistry();
		} catch (Exception e) {
			System.err.println("Exception while intializing RMI: \n" + e);
			e.printStackTrace();
		}

		try {
			server = new User(UUID.randomUUID(), "GameServer");
			serverStub = (IUser) UnicastRemoteObject.exportObject(server, IRMI_Defs.CLASS_SERVER_PORT_SERVER + 1);
			registry.rebind(IUser.BOUND_NAME, serverStub);
			viewAdpt.append("Game Server bound to \"" + IUser.BOUND_NAME + "\"\n");
		} catch (Exception e) {
			System.err.println("Server Exception: " + e);
			e.printStackTrace();
		}

		// create lobby
		lobby = new ChatRoom(UUID.randomUUID(), "LOBBY");
		viewAdpt.append("Server created lobby chat room.\n");
		server.addChatRoom(lobby);

		// create receiver stub (server do not join lobby chat room)
		Receiver newReceiver = new Receiver(UUID.randomUUID(), serverStub);
		viewAdpt.append("Make new Receiver for game server.\n");
		try {
			receiverStub = (IReceiver) UnicastRemoteObject.exportObject(newReceiver,
					IRMI_Defs.CLASS_SERVER_PORT_SERVER + 1);
			registry.rebind(lobby.getName(), receiverStub);
		} catch (RemoteException e) {
			System.err.println("exception creating receiver stub for server");
			e.printStackTrace();
		}
	}

	public void sendGame() {
		GameFactory fac = new GameFactory(receiverStub);
		GameStartData msg = new GameStartData(fac);
		lobby.sendPacket(new DataPacketCR<GameStartData>(GameStartData.class, msg, receiverStub));
	}

}
