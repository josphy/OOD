package rmiServer.view;

import java.awt.BorderLayout;
//import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.border.MatteBorder;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class RMIServerFrame extends JFrame {

	/**
	 * A ID auto generated by eclipse used in serialization.
	 */
	private static final long serialVersionUID = 3065866923765117731L;
	
	/**
	 * The content panel for the RMI server view.
	 */
	private JPanel contentPane;
	private final JPanel panel = new JPanel();
	private final JButton btnQuit = new JButton("Quit\n");
	private final JScrollPane scrollPaneOfSendText = new JScrollPane();
	private final JTextArea textAreaOfSendedMsg = new JTextArea(1, 25);
	private final JLabel lblSenfMsg = new JLabel("Send msg to remote client's view");
	private final JScrollPane scrollPane = new JScrollPane();
	private final JTextArea textAreaRMIServerConsole = new JTextArea();
	private IRMIServerView2ModelAdapter view2ModelAdapter = IRMIServerView2ModelAdapter.NULL_OBJECT;

	/**
	 * Launch the application.
	 */
	/*
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					RMIServerFrame frame = new RMIServerFrame();
					frame.start();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	*/

	/**
	 * Create the frame.
	 */
	public RMIServerFrame(IRMIServerView2ModelAdapter view2ModelAdapter) {
		this.view2ModelAdapter = view2ModelAdapter;
		init();
	}
	
	/**
	 * This method initialize the GUI.
	 */
	public void init() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 900, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);
		
		contentPane.add(panel, BorderLayout.NORTH);
		btnQuit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				view2ModelAdapter.quit();
			}
		});
		btnQuit.setToolTipText("shut down the RMI system and quit.");
		
		panel.add(btnQuit);
		
		panel.add(scrollPaneOfSendText);
		textAreaOfSendedMsg.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					String msg = textAreaOfSendedMsg.getText();
					if (msg.length() == 0) {
						return;
					}
					view2ModelAdapter.msgToClientView(msg);
					System.out.println("detect an enter key pressed.");
				}
			}
			
			@Override
			public void keyReleased(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_ENTER) {
					textAreaOfSendedMsg.setText("");
				}
			}
		});
		textAreaOfSendedMsg.setText("Hit Enter to send msg...");
		textAreaOfSendedMsg.setWrapStyleWord(true);
		textAreaOfSendedMsg.setLineWrap(true);
		
		scrollPaneOfSendText.setViewportView(textAreaOfSendedMsg);
		lblSenfMsg.setToolTipText("Write text you want to send to client view here. Hit Enter to send text.");
		lblSenfMsg.setBorder(new MatteBorder(0, 0, 1, 0, (Color) new Color(0, 0, 0)));
		
		scrollPaneOfSendText.setColumnHeaderView(lblSenfMsg);
		
		contentPane.add(scrollPane, BorderLayout.CENTER);
		textAreaRMIServerConsole.setWrapStyleWord(true);
		textAreaRMIServerConsole.setLineWrap(true);
		
		scrollPane.setViewportView(textAreaRMIServerConsole);
	}

	/**
	 * This method starts the GUI frame and make it visible to the user.
	 */
	public void start() {
		this.setVisible(true);
	}
	
	/**
	 * This method add new text message to the RMI server console text area.
	 * 
	 * @param newText The new text needs to be added to RMI server console text area.
	 */
	public void addText(String newText) {
		textAreaRMIServerConsole.append(newText);
	}
}
