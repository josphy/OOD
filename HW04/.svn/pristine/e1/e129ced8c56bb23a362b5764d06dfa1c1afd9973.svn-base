package model.paintStrategy;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;

import model.ball.Ball;
import model.paint.IPaintStrategy;

/**
 * Paint strategy that paints a filled circle with the Ball's radius. 
 */
public class BallPaintStrategy implements IPaintStrategy {
	
	/**
	 * Unit sized circle used as a prototype
	 */
	private Shape ball;
	
	/**
	 * The AffineTransformed used for internal calculations
	 */
	private AffineTransform at = new AffineTransform();

	/**
	 * No parameter constructor that creates a 1 pixel radius ball at the origin. 
	 * Instantiates a new AffineTransform for internal use.
	 */
	public BallPaintStrategy() {
		this(new AffineTransform(), 0, 0, 1, 1);
	}
	
	/**
	 * Constructor that allows one to create the prototype ball of arbitrary dimension and location. The AffineTransform is externally supplied.
	 * @param at - The AffineTransform to use for internal calculations
	 * @param x - floating point x-coordinate of center of circle
	 * @param y - floating point y-coordinate of center of circle
	 * @param width - floating point x-radius of the circle (ellipse)
	 * @param height - floating point y-radius of the circle (ellipse)
	 */
	public BallPaintStrategy(AffineTransform at, double x, double y, double width, double height) {
		this.at = at;
		ball = new Ellipse2D.Double(x-width, y-width, 2*width, 2*height);		
	}

	/**
	 * By default, do nothing for initialization.
	 * @param host - The ball to initialize
	 */
	@Override
	public void init(Ball host) {
		// TODO Auto-generated method stub

	}

	/**
	 * Paints on the given graphics context using the color, scale and direction provided by the host. 
	 * @param g - The graphics context to draw upon.
	 * @param host - The host ball 
	 */
	@Override
	public void paint(Graphics g, Ball host) {
		at.setToTranslation(host.getLocation().x, host.getLocation().y);
		at.scale(host.getRadius(), host.getRadius());
		g.setColor(host.getColor());
		paintXfrm(g, host, at);
	}
	
	/**
	 * Paints a transformed circle, as per the given AffineTransform Uses color already set in Graphics context
	 * @param g - The graphics context to draw upon
	 * @param host - The host ball
	 * @param at - The AffineTransform to use
	 */
	public void paintXfrm(Graphics g, Ball host, AffineTransform at) {
		((Graphics2D)g).fill(at.createTransformedShape(ball));
	}

}
