package model;

import java.awt.Graphics;

import java.awt.Rectangle;

import javax.swing.JPanel;
import javax.swing.Timer;

import model.ball.Ball;
import model.strategy.*;
import util.Dispatcher;
import util.Randomizer;
import model.paint.*;
import model.paintStrategy.*;
// TODO: Auto-generated Javadoc
/**
 * This is a Ball Model class.
 *
 * @author Haoshan Zou, Li Yang
 * @version 1.0
 * @since 2017-09-17
 */
public class BallModel {

	/**
	 * _model2ViewAdpt is the instance of model to view adapter. This insures that the adapter is always valid.
	 */
	private IModel2ViewAdapter _model2ViewAdpt = IModel2ViewAdapter.NULL_OBJECT;

	/**
	 * Constructor of BallModel.
	 * @param model2ViewAdpt An instance of model to view adaptor.
	 */
	public BallModel(IModel2ViewAdapter model2ViewAdpt) {
		_model2ViewAdpt = model2ViewAdpt;
	}

	/**
	 * _timeSlice is the time interval for calling update method of model to view adapter.
	 */
	private int _timeSlice = 50; // update every 50 milliseconds

	/**
	 * _timer is the timer which calling update method of model to view adapter every _timeSlice.
	 */
	private Timer _timer = new Timer(_timeSlice, (e) -> _model2ViewAdpt.update());

	/**
	 * start method starts the timer.
	 */
	public void start() {
		_timer.start();
	}

	/**
	 * myDispatcher is the instance of the dispatcher.
	 */
	private Dispatcher myDispatcher = new Dispatcher();

	/**
	 * This is the method that is called by the view's adapter to the model, i.e. is called by IView2ModelAdapter.paint().
	 * This method will update the sprites's painted locations by painting all the sprites
	 * onto the given Graphics object.
	 * @param g The Graphics object from the view's paintComponent() call.
	 */
	public void update(Graphics g) {
		myDispatcher.notifyAll(g); // The Graphics object is being given to all the sprites (Observers)
	}

	/**
	 * create a new ball and add to dispatcher.
	 * @param strategy ball update strategy
	 */
	public void loadBall(IUpdateStrategy strategy, IPaintStrategy paintStrategy) {
		// random generate parameters except for strategy
		Rectangle velRec = new Rectangle(0, 0, 10, 10);
		Rectangle locRec = new Rectangle(0, 0, ballPanel.getWidth(), ballPanel.getHeight());
		Ball newBall = new Ball(Randomizer.Singleton.randomLoc(locRec), Randomizer.Singleton.randomInt(10, 20),
				Randomizer.Singleton.randomVel(velRec), Randomizer.Singleton.randomColor(), ballPanel, strategy, paintStrategy);
		myDispatcher.addObserver(newBall);
	}

	/**
	 * A factory for a beeping error strategy that beeps the speaker every 25 updates.
	 * Either use the _errorStrategyFac variable directly if you need a factory that makes an error strategy,
	 * or call _errorStrategyFac.make() to create an instance of a beeping error strategy.
	 */
	private IStrategyFac _errorStrategyFac = new IStrategyFac() {
		@Override
		/**
		 * Make the beeping error strategy
		 * @return  An instance of a beeping error strategy
		 */
		public IUpdateStrategy make() {
			return new IUpdateStrategy() {
				private int count = 0; // update counter

				@Override
				/**
				 * Beep the speaker every 25 updates
				 */
				public void updateState(Ball context) {
					if (25 < count++) {
						java.awt.Toolkit.getDefaultToolkit().beep();
						count = 0;
					}
				}
			};
		}
	};

	/**
	 * Returns an IStrategyFac that can instantiate the strategy specified by
	 * className. Returns a factory for a beeping error strategy if className is null. 
	 * The toString() of the returned factory is the className.
	 * 
	 * @param className  Shortened name of desired strategy
	 * @return A factory to make that strategy
	 */
	public IStrategyFac makeStrategyFac(final String className) {
		if (null == className)
			return _errorStrategyFac;
		return new IStrategyFac() {
			/**
			 * Instantiate a strategy corresponding to the given class name.
			 * @return An IUpdateStrategy instance
			 */
			public IUpdateStrategy make() {
				return loadStrategy(fixName(className));
			}

			/**
			 * Return the given class name string
			 */
			public String toString() {
				return className;
			}
		};
	}

	/**
	 * Fix name.
	 *
	 * @param classname a input abbreviated class name
	 * @return the full class name
	 */
	private String fixName(String classname) {
		return "model.strategy." + classname + "Strategy";
	}

	/**
	* The following method returns an instance of an strategy, given a fully qualified class name (package.classname) of
	* a subclass of IUpdateStrategy.
	* The method assumes that there is only one constructor for the supplied class that has the same *number* of
	* input parameters as specified in the args array and that it conforms to a specific
	* signature, i.e. specific order and types of input parameters in the args array.
	* @param className A string that is the fully qualified class name of the desired object
	* @return An instance of the supplied class. 
	*/
	private IUpdateStrategy loadStrategy(String className) {
		try {
			return (IUpdateStrategy) Class.forName(className).newInstance();
		} catch (Exception ex) {
			System.err.println("Strategy " + " failed to load. \nException = \n" + ex);
			ex.printStackTrace();
			// return a concrete strategy but updateState does nothing.
			return new IUpdateStrategy() {
				@Override
				public void updateState(Ball context) {
				}
			};
		}
	}

	/**
	 * Returns an IStrategyFac that can instantiate a MultiStrategy with the two
	 * strategies made by the two given IStrategyFac objects. Returns null if
	 * either supplied factory is null. The toString() of the returned factory
	 * is the toString()'s of the two given factories, concatenated with "-". 
	 * If either factory is null, then a factory for a beeping error strategy is returned.
	 * 
	 * @param stratFac1 An IStrategyFac for a strategy
	 * @param stratFac2 An IStrategyFac for a strategy
	 * @return An IStrategyFac for the composition of the two strategies
	 */
	public IStrategyFac combineStrategyFacs(final IStrategyFac stratFac1, final IStrategyFac stratFac2) {
		if (null == stratFac1 || null == stratFac2)
			return _errorStrategyFac;
		return new IStrategyFac() {
			/**
			 * Instantiate a new MultiStrategy with the strategies from the given strategy factories
			 * @return A MultiStrategy instance
			 */
			public IUpdateStrategy make() {
				return new MultiStrategy(stratFac1.make(), stratFac2.make());
			}

			/**
			 * Return a string that is the toString()'s of the given strategy factories concatenated with a "-"
			 */
			public String toString() {
				return stratFac1.toString() + "-" + stratFac2.toString();
			}
		};
	}

	/**
	 * switcher strategy.
	 */
	private SwitcherStrategy _switcher = new SwitcherStrategy();

	/**
	 * get switcher strategy.
	 * @return switcher strategy.
	 */
	public SwitcherStrategy getSwitcherStrategy() {
		return _switcher;
	}

	/**
	 * set new switcher strategy>.
	 *
	 * @param strategy the new switcher strategy.
	 */
	public void switchSwitcherStrategy(IUpdateStrategy strategy) {
		getSwitcherStrategy().setStrategy(strategy);
	}

	/**
	 * ballPanel is the ball panel to draw balls.
	 */
	private JPanel ballPanel;

	/**
	 * setPanel method sets the ball panel.
	 * @param ballPanel The panel to show the animation of balls.
	 */
	public void setPanel(JPanel ballPanel) {
		// TODO Auto-generated method stub
		this.ballPanel = ballPanel;
	}

	/**
	 *  clearBalls method clears all balls on the panel.
	 */
	public void clearBalls() {
		myDispatcher.deleteObservers();
	}
	
	// Strategy paint methods begins here
	
	/**
	 * 
	 * @param pntName
	 * @return
	 */
	public IPaintStrategy loadPaintStrategy(String pntName) {
		//return new EllipsePaintStrategy();
		try {
			return (IPaintStrategy) Class.forName(pntName).newInstance();
		} catch (Exception ex) {
			System.err.println("Paint Strategy " + " failed to load. \nException = \n" + ex);
			ex.printStackTrace();
			// return a concrete strategy but updateState does nothing.
			return new IPaintStrategy() {
				public void init(Ball host) {
				}
				public void paint(Graphics g, Ball host) {
				}
			};
		}
	}
	/**
	 * 
	 * @param pntName
	 * @return
	 */
	public IPaintStrategyFac makePaintStrategy(String pntName) {
		return new IPaintStrategyFac() {
			public IPaintStrategy make() {
				return loadPaintStrategy("model.paintStrategy." + pntName + "PaintStrategy");
			}
			public String toString() {
				return pntName;
			}
		};
	}
	

}
