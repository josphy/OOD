package model.paintStrategy;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.geom.AffineTransform;

import model.ball.Ball;
import model.paint.FixedColorPaintStrategy;
import model.paint.MultiPaintStrategy;

/**
 * Subclass of MultiPaintStrategy that uses a SwimFishPaintStrategy and an FixedColorPaintStrategy to paint a swimming fish shape that has an eye.
 */
public class NiceFishPaintStrategy extends MultiPaintStrategy{

	/**
	 * No-parameter constructor that instantiates the AffineTransform for internal use.
	 */
	public NiceFishPaintStrategy() {
		this(new AffineTransform());
	}
	
	/**
	 * Constructor that uses an externally supplied AffineTransform for internal use.
	 * @param at - The AffineTransform to use.
	 */
	public NiceFishPaintStrategy(AffineTransform at) {
		super(at, new SwimFishPaintStrategy(), 
				new FixedColorPaintStrategy(new EllipsePaintStrategy(2.2,1.0,0.4,0.4), Color.black));
	}

	/**
	 * Override paintCfg to add the transform needed to keep the fish upright at all times.
	 */
	@Override
	protected void paintCfg(Graphics g, Ball host) {
		  super.paintCfg(g, host);
		  if(Math.abs(Math.atan2(host.getVelocity().y, host.getVelocity().x))> Math.PI/2.0) {
		    getAffTrans().scale(1.0, -1.0);
		  }        		
	}
}
