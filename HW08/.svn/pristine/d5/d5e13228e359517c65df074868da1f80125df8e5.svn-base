package chatApp.model;

import java.net.SocketException;
import java.net.UnknownHostException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import common.IChatRoom;
import common.IReceiver;
import common.IUser;
import provided.rmiUtils.IRMIUtils;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;

public class ChatAppModel {

	private IMainViewAdapter viewAdpt;

	private User user;

	private IUser userStub;

	private IUser remoteUserStub;

	// private Set<IChatRoom> chatrooms = new HashSet<>();

	private Set<IUser> connectedUsers = new HashSet<>();

	private Map<IChatRoom, IMain2MiniAdapter> miniMVCAdpts = new HashMap<>();

	private IRMIUtils rmiUtils;

	/**
	 * local registry
	 */
	private Registry registry;

	public ChatAppModel(IMainViewAdapter adapter) {
		this.viewAdpt = adapter;
		this.rmiUtils = new RMIUtils((s) -> {
			this.viewAdpt.append(s);
		});
	}

	public void start() {

	}

	public void login(int port, String name) {
		try {
			rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_CLIENT);
			registry = rmiUtils.getLocalRegistry();
			String localIP = rmiUtils.getLocalAddress();
			viewAdpt.setLocalIP(localIP);
			viewAdpt.append("Logged in! Ready...\n");

			user = new User(UUID.randomUUID(), name);
			userStub = (IUser) UnicastRemoteObject.exportObject(user, port);
			// registry.rebind(IUser.BOUND_NAME, userStub);
			// viewAdpt.append("IUser bound to \"" + IUser.BOUND_NAME + "\"\n");
			registry.rebind(Integer.toString(port), userStub);
			viewAdpt.append("IUser bound to \"" + port + "\"\n");

		} catch (SocketException | UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void connectTo(String remoteHost) {
		try {
			String[] remote = remoteHost.split(":"); // remoteHost = remoteIP + ":" + port;
			String remoteIP = remote[0];
			String port = remote[1];

			viewAdpt.append("Locating registry at " + remoteIP + "...");
			Registry registryRemote = rmiUtils.getRemoteRegistry(remoteIP);
			viewAdpt.append("Found registry: " + registryRemote);

			remoteUserStub = (IUser) registryRemote.lookup(port);
			viewAdpt.append("Found remote user object: " + remoteUserStub + "\n");
			addUser(remoteUserStub);

		} catch (RemoteException | NotBoundException e) {
			System.err.println("Exception while retrieving remote user stub: \n" + e);
			e.printStackTrace();
			System.exit(-1);
		}

		viewAdpt.append("Connection to " + remoteHost + " established!\n");
	}

	public void requestRoom(IUser other) {
		try {
			Set<IChatRoom> otherRooms = (Set<IChatRoom>) other.getChatRooms();
			for (IChatRoom chatroom : otherRooms) {
				user.addChatRoom(chatroom);
				viewAdpt.addChatroom(chatroom);
			}

			viewAdpt.append("Obtained room list from " + other + "!\n");

		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void invite(IUser other) {

	}

	public void createRoom(int port, String name) {
		try {
			IChatRoom newRoom = new ChatRoom(UUID.randomUUID(), name);
			viewAdpt.append("Make new ChatRoom: " + newRoom.getName() + "\n");

			// make a new IReceiver stub for user in the new chatroom
			Receiver newReceiver = new Receiver(UUID.randomUUID(), userStub);
			viewAdpt.append("Make new Receiver for User:" + newReceiver.getUserStub().getName() + "\n");
			IReceiver receiverStub = (IReceiver) UnicastRemoteObject.exportObject(newReceiver, port);
//			registry.rebind(IConnect.BOUND_NAME + newRoom.hashCode(), receiverStub);
			registry.rebind(name, receiverStub);
			viewAdpt.append("Make new IReceiver Stub for User.\n");
			
			// add receiver stub to newRoom
			newRoom.addIReceiverStub(receiverStub);
			viewAdpt.append("Add new ChatServer Stub to newRoom.\n");
			
			// add newchatroom to the user chatroom lists
			user.addChatRoom(newRoom);
			viewAdpt.addChatroom(newRoom);
			viewAdpt.append("Add new chatroom <" + newRoom.getName() + "> to user <" + user.getName() + ">\n");

			IMain2MiniAdapter miniMVCAdpt = viewAdpt.makeMini(newRoom);
			miniMVCAdpts.put(newRoom, miniMVCAdpt);
		} catch (Exception e) {
			viewAdpt.append("Error creating chatroom!");
		}
	}

	public void joinRoom(int port, IChatRoom room) {
		viewAdpt.append("Join ChatRoom" + room.getName());
		IChatRoom chatroom = new ChatRoom(room.getUUID(), room.getName());
		Receiver newReceiver = new Receiver(UUID.randomUUID(), userStub);
		try {
			viewAdpt.append("Start joining..");
			IReceiver receiverStub = (IReceiver) UnicastRemoteObject.exportObject(newReceiver, port);
			registry.rebind(room.getName(), receiverStub);

			for (IReceiver member : room.getIReceiverStubs()) {
				chatroom.addIReceiverStub(member);
//				member.receive(??);	//IAddReceiverType
			}
			chatroom.addIReceiverStub(receiverStub);
			user.addChatRoom(chatroom);
			viewAdpt.addChatroom(chatroom);

			IMain2MiniAdapter miniMVCAdpt = viewAdpt.makeMini(chatroom);
			miniMVCAdpts.put(chatroom, miniMVCAdpt);
			viewAdpt.append("Success!");

		} catch (Exception e) {
			viewAdpt.append("Fail to join the room!");
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void addUser(IUser remoteUserStub) {
		connectedUsers.add(remoteUserStub);
		viewAdpt.addUser(remoteUserStub);

	}

	public void quit() {
		rmiUtils.stopRMI();
		System.exit(0);
	}
}
