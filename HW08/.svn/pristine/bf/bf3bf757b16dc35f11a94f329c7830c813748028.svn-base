package chatApp.model;

import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import javax.swing.ImageIcon;

import chatApp.Data.InstallCmdData;
import chatApp.Data.RequestCmdData;
import chatRoom.model.ChatRoomModel;
import chatRoom.model.ImageIconCmd;
import chatRoom.model.StringCmd;
import common.DataPacketAlgoCmd;
import common.DataPacketChatRoom;
import common.IAddReceiverType;
import common.ICmd2ModelAdapter;
import common.IComponentFactory;
import common.IInstallCmdType;
import common.IReceiver;
import common.IRemoveReceiverType;
import common.IRequestCmdType;
import common.IUser;
import provided.datapacket.DataPacketAlgo;

public class Receiver implements IReceiver {

	private UUID id;

	private IUser userStub;

	private IReceiver receiverStub;

	private transient DataPacketAlgo<String, String> myDataPacketAlgo;

	private transient Map<Class<?>, Set<DataPacketChatRoom<?>>> unknownDataPackets;

	private transient ChatRoomModel model;

	private transient ICmd2ModelAdapter cmd2ModelAdpt = new ICmd2ModelAdapter() {

		@Override
		public void appendMsg(String text, String name) {
			model.viewAdpt.append(name + ": " + text);

		}

		@Override
		public void buildScrollableComponent(IComponentFactory fac, String label) {
			model.viewAdpt.getDialogPnl().add(fac.makeComponent());

		}

		@Override
		public void buildNonScrollableComponent(IComponentFactory fac, String label) {
			// TODO Auto-generated method stub

		}

	};

	public Receiver(UUID id, IUser userStub) {
		this.id = id;
		this.userStub = userStub;
	}

	public void start(IReceiver receiverStub) {
		this.receiverStub = receiverStub;
		this.unknownDataPackets = new HashMap<>();
		this.myDataPacketAlgo = new DataPacketAlgo<String, String>(null);
		initDataPacketAlgo();
	}
	
	public void setModel(ChatRoomModel model) {
		this.model = model;
	}

	/**
	 * specify commands to process different types of messages
	 */
	public void initDataPacketAlgo() {
		
		/**
		 * unknown message type goes to default command
		 */
		myDataPacketAlgo.setDefaultCmd(new DataPacketAlgoCmd<String>() {

			private static final long serialVersionUID = -6372641218423318226L;

			@Override
			public String apply(Class<?> index, DataPacketChatRoom<String> host, String... params) {
				System.out.println("unknown data packet type");
				
				if (unknownDataPackets.containsKey(index)) {
					unknownDataPackets.get(index).add(host);
				} else {
					Set<DataPacketChatRoom<?>> values = new HashSet<DataPacketChatRoom<?>>();
					values.add(host);
					unknownDataPackets.put(index, values);
				}

				(new Thread() {
					public void run() {
						super.run();
						try {
							host.getSender().receive(new DataPacketChatRoom<IRequestCmdType>(IRequestCmdType.class, new RequestCmdData(index), receiverStub));
						} catch (RemoteException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				}).start();
				
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {}
			
		});
		
		myDataPacketAlgo.setCmd(IAddReceiverType.class, new DataPacketAlgoCmd<IAddReceiverType>() {

			private static final long serialVersionUID = 6966687911909827199L;

			@Override
			public String apply(Class<?> index, DataPacketChatRoom<IAddReceiverType> host, String... params) {
				model.getChatRoom().addIReceiverStubLocally(host.getData().getReceiverStub());
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {}	
		});
		
		myDataPacketAlgo.setCmd(IRemoveReceiverType.class, new DataPacketAlgoCmd<IRemoveReceiverType>() {

			private static final long serialVersionUID = -7144544693151711678L;

			@Override
			public String apply(Class<?> index, DataPacketChatRoom<IRemoveReceiverType> host, String... params) {
				model.getChatRoom().removeIReceiverStubLocally(host.getData().getReceiverStub());
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {}	
		});
		
		myDataPacketAlgo.setCmd(IRequestCmdType.class, new DataPacketAlgoCmd<IRequestCmdType>() {

			private static final long serialVersionUID = -7144544693151711678L;

			@Override
			public String apply(Class<?> index, DataPacketChatRoom<IRequestCmdType> host, String... params) {
				try {
					host.getSender().receive(new DataPacketChatRoom<IInstallCmdType>(IInstallCmdType.class, 
							new InstallCmdData((DataPacketAlgoCmd<?>) myDataPacketAlgo.getCmd(host.getData().getCmdId()), host.getData().getCmdId()), receiverStub));
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {}	
		});
		
		myDataPacketAlgo.setCmd(IInstallCmdType.class, new DataPacketAlgoCmd<IInstallCmdType>() {

			private static final long serialVersionUID = -7144544693151711678L;

			@Override
			public String apply(Class<?> index, DataPacketChatRoom<IInstallCmdType> host, String... params) {
				DataPacketAlgoCmd<?> unknownCmd = host.getData().getCmd();
				unknownCmd.setCmd2ModelAdpt(cmd2ModelAdpt);
				myDataPacketAlgo.setCmd(host.getData().getCmdId(), unknownCmd);
				Set<DataPacketChatRoom<?>> executables = unknownDataPackets.remove(host.getData().getCmdId());
				for (DataPacketChatRoom<?> executable:executables) {
					executable.execute(myDataPacketAlgo, params);
				}
				return null;
			}

			@Override
			public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {}	
		});		
		
		/**
		 * predefined commands for text and image
		 */
		StringCmd stringCmd = new StringCmd();
		stringCmd.setCmd2ModelAdpt(cmd2ModelAdpt);
		myDataPacketAlgo.setCmd(String.class, stringCmd);
		
		ImageIconCmd imageIconCmd = new ImageIconCmd();
		imageIconCmd.setCmd2ModelAdpt(cmd2ModelAdpt);
		myDataPacketAlgo.setCmd(ImageIcon.class, imageIconCmd);
		
	}

	@Override
	public <T> void receive(DataPacketChatRoom<T> data) throws RemoteException {
		data.execute(myDataPacketAlgo);
	}

	@Override
	public IUser getUserStub() throws RemoteException {
		return userStub;
	}

	@Override
	public UUID getUUID() throws RemoteException {
		return id;
	}

}
