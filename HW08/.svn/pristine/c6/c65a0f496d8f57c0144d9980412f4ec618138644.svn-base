package chatRoom.model;

import java.rmi.RemoteException;

import javax.swing.ImageIcon;

import chatApp.Data.RemoveReceiverData;
import common.DataPacketChatRoom;
import common.IRemoveReceiverType;
import common.IChatRoom;
import common.IReceiver;

public class ChatRoomModel{

	public IMiniViewAdapter viewAdpt = IMiniViewAdapter.NULL_OBJECT;	//local view adapter
	
	private IChatRoom chatroom; 		//API - to send
	
	private IReceiver myReceiver;	//API - to receive
	
	private IMini2MainAdapter mainAdpt;
	
	/**
	 * RMI utilities for starting RMI and for getting the Registry
	 */

	public ChatRoomModel(IChatRoom chatroom, IReceiver receiverStub, IMiniViewAdapter adapter, IMini2MainAdapter mainAdpt) {
		this.chatroom = chatroom;
		this.viewAdpt = adapter;
		this.myReceiver = receiverStub;
		this.mainAdpt = mainAdpt;
	}
	
	public void start() throws RemoteException {}

	
	/**
	 * current user quit the room
	 */
	public void leaveRoom() {
		chatroom.removeIReceiverStubLocally(myReceiver);
		chatroom.sendPacket(new DataPacketChatRoom<IRemoveReceiverType>(IRemoveReceiverType.class, new RemoveReceiverData(myReceiver), myReceiver)); //IAddReceiverType
		refreshUserList();
		viewAdpt.append("You have left this room!");
		mainAdpt.leaveRoom(chatroom);
//		System.exit(0);	//shut down the GUI
		
	}
	
	public void sendText(String text) {
		chatroom.sendPacket(new DataPacketChatRoom<String>(String.class, text, myReceiver));
	}
	
	public void sendImg(ImageIcon image) {
		chatroom.sendPacket(new DataPacketChatRoom<ImageIcon>(ImageIcon.class, image, myReceiver));
	}
	
	public IChatRoom getChatRoom() {
		return this.chatroom;
	}
	
	public void refreshUserList() {
		viewAdpt.setUserList(chatroom.getIReceiverStubs());
	}
	
	/**
	 * invite another user to this room by adding the room to the other user's available room list
	 * @param userIP identifier of the other user
	 */
	public void addUser(String userIP) {
//		IRMIUtils rmiUtils;
//		rmiUtils = new RMIUtils((s) -> {
//			this.viewAdpt.append(s);
//		});
//		Registry registry = rmiUtils.getRemoteRegistry(userIP);
//		try {
//			IUser user = (IUser) registry.lookup(IUser.BOUND_NAME);
//			if (user!=null) {
//				user.addChatroom(chatroom);
//			}
//		} catch (RemoteException | NotBoundException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		
	}
	
}

