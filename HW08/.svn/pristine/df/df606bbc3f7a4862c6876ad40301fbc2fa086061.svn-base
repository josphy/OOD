package chatApp.model;

import java.io.Serializable;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import common.DataPacketChatRoom;
import common.IAddReceiverType;
import common.IChatRoom;
import common.IReceiver;
import common.IUser;
import provided.rmiUtils.IRMIUtils;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;
import chatApp.Data.AddReceiverData;

public class ChatAppModel {

	private IMainViewAdapter viewAdpt;

	private User user;

	private IUser userStub;

//	private Set<IUser> connectedUsers = new HashSet<>();
	
	private Set<Receiver> generatedReceivers = new HashSet<>();

	private Map<IChatRoom, IMain2MiniAdapter> miniMVCAdpts = new HashMap<>();

	private IRMIUtils rmiUtils;

	/**
	 * local registry
	 */
	private Registry registry;

	public ChatAppModel(IMainViewAdapter adapter) {
		this.viewAdpt = adapter;
	}

	public void start() {
		viewAdpt.append("Welcome to Chat App!\n");

	}

	public void login(int port, String name) {
		viewAdpt.append("Logging in...\n");
		try {
			rmiUtils = new RMIUtils((s) -> {
				viewAdpt.append(s + '\n');
			});
			rmiUtils.startRMI(port+100);
			registry = rmiUtils.getLocalRegistry();
			viewAdpt.setLocalIP(rmiUtils.getLocalAddress());
			viewAdpt.append("Ready...\n");
		} catch (SocketException | UnknownHostException e) {
			System.err.println("Exception while intializing RMI: \n" + e);
			e.printStackTrace();
		}
		
		try {
			user = new User(UUID.randomUUID(), name);
			userStub = (IUser) UnicastRemoteObject.exportObject(user, port);
			registry.rebind(IUser.BOUND_NAME, userStub);
			viewAdpt.append("IUser " + name + " bound to \"" + IUser.BOUND_NAME + "\"\n");
			// registry.rebind(Integer.toString(port), userStub);
			// viewAdpt.append("IUser bound to \"" + port + "\"\n");

		} catch (RemoteException e) {
			System.err.println("Exception while creating user: \n" + e);
			e.printStackTrace();
		}
	}

	public void connectTo(String remoteHost) {
		try {
			String[] remote = remoteHost.split(":"); // remoteHost = remoteIP + ":" + port;
			String remoteIP = remote[0];
//			String port = remote[1];

			viewAdpt.append("Locating registry at " + remoteIP + "...\n");
			Registry registryRemote = rmiUtils.getRemoteRegistry(remoteIP);
			viewAdpt.append("Found registry: " + registryRemote + "\n");

			IUser remoteUserStub = (IUser) registryRemote.lookup(IUser.BOUND_NAME);
			viewAdpt.append("Found remote user object: " + remoteUserStub + "\n");
			addUser(remoteUserStub);

		} catch (RemoteException | NotBoundException e) {
			System.err.println("Exception while retrieving remote user stub: \n" + e);
			e.printStackTrace();
		}

		viewAdpt.append("Connection to " + remoteHost + " established!\n");
	}

	public void requestRoom(IUser other) {
		try {
			Set<IChatRoom> otherRooms = (Set<IChatRoom>) other.getChatRooms();
			for (IChatRoom chatroom : otherRooms) {
				user.addChatRoom(chatroom);
				viewAdpt.addChatroom(chatroom);
			}

			viewAdpt.append("Obtained room list from " + other + "!\n");

		} catch (RemoteException e) {
			System.err.println("Exception while requesting room from remote user: \n" + e);
			e.printStackTrace();
		}
	}

	public void invite(IUser other) {

	}

	public void createRoom(int port, String name) {	
		try {
			ChatRoom newRoom = new ChatRoom(UUID.randomUUID(), name);
			viewAdpt.append("Make new ChatRoom: " + newRoom.getName() + "\n");

			// add new chat room to the user's chat room lists
			user.addChatRoom(newRoom);
			viewAdpt.addChatroom(newRoom);
			viewAdpt.append("Add new chatroom <" + newRoom.getName() + "> to user <" + user.getName() + ">\n");
			
		} catch (RemoteException e) {
			System.err.println("Exception while creating a new room: \n" + e);
			e.printStackTrace();
		}
		// registry.rebind(IConnect.BOUND_NAME + newRoom.hashCode(), receiverStub);

	}

	public void joinRoom(int port, IChatRoom chatroom) {
		viewAdpt.append("Joining ChatRoom " + chatroom.getName() + "...\n");
		try {
			// make a new IReceiver stub for user in the new chatroom
			Receiver newReceiver = new Receiver(UUID.randomUUID(), userStub);
			viewAdpt.append("Make new Receiver for User:" + user.getName() + "\n");
			IReceiver receiverStub = (IReceiver) UnicastRemoteObject.exportObject(newReceiver, port);
			registry.rebind(chatroom.getName(), receiverStub);
			newReceiver.start(receiverStub);	//first priority after stub is created
			viewAdpt.append("Make new IReceiver Stub.\n");

			// add receiver stub to newRoom
			chatroom.addIReceiverStubLocally(receiverStub);
			viewAdpt.append("Add new ChatServer Stub to newRoom.\n");
			
			viewAdpt.append("Start joining...\n");
			chatroom.sendPacket(new DataPacketChatRoom<IAddReceiverType>(IAddReceiverType.class,
					new AddReceiverData(receiverStub), receiverStub)); // IAddReceiverType
			chatroom.addIReceiverStubLocally(receiverStub);

			IMain2MiniAdapter miniMVCAdpt = viewAdpt.makeMini(chatroom, receiverStub);
			newReceiver.setModel(miniMVCAdpt.getMiniModel());
			generatedReceivers.add(newReceiver);//keep reference so that it is not collected as garbage
			miniMVCAdpts.put(chatroom, miniMVCAdpt);
			viewAdpt.append("Success!");

		} catch (Exception e) {
			viewAdpt.append("Fail to join the room!\n");
			System.err.println("Exception while joining room: \n" + e);
			e.printStackTrace();
		}
	}

	public void addUser(IUser remoteUserStub) {
		try {
			user.connect(remoteUserStub);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		viewAdpt.addUser(remoteUserStub);

	}

	public void quit() {
		if (rmiUtils != null) rmiUtils.stopRMI();
		System.exit(0);
	}
	
//	/**
//	 * Private class to decorate an IUser to override the equals() and hashCode() 
//	 * methods so that a dictionary, e.g. Hashtable, can properly compare IUsers.
//	 * @author swong
//	 *
//	 */
//	private class ProxyUser implements IUser, Serializable {
//		
//		/**
//		 * Required for proper serialization
//		 */
//		private static final long serialVersionUID = 5682755540794448769L; // regenerate this!
//		
//		/**
//		 * The decoree
//		 */
//		private IUser stub;
//
//		/**
//		 * Constructor for the class
//		 * @param stub The decoree
//		 */
//		public ProxyUser(IUser stub){
//			this.stub = stub;
//		}
//		
//		/**
//		 * No-op decoration of the getName method.   Just pass the request to the decoree.
//		 * @return The name of the user.
//		 * @throws RemoteException
//		 */
//		@Override
//		public String getName() throws RemoteException {
//			return stub.getName();
//		}
//
//		/**
//		 * Get the decoree
//		 * @return the decoree
//		 */
//		public IUser getStub() {
//			return stub;
//		}
//
//
//		/**
//		 * Overriden equals() method to simply compare hashCodes.
//		 * @return  Equal if the hashCodes are the same.  False otherwise.
//		 */
//		@Override
//		public boolean equals(Object other){
//			return hashCode() == other.hashCode();
//		}
//		
//
//		/**
//		 * Overriden hashCode() method to create a hashcode from all the accessible values in IUser.
//		 * @return a hashCode tied to the values of this IUser.	
//		 */
//		@Override
//		public int hashCode(){
//			try {
//				// Only name is available for now.
//				return stub.getUUID().hashCode();
//			} catch (RemoteException e) {
//				// Deal with the exception without throwing a RemoteException.
//				System.err.println("ProxyStub.hashCode(): Error calling remote method on IUser stub: "+e);
//				e.printStackTrace();
//				return super.hashCode();
//			}
//		}
//
//		@Override
//		public UUID getUUID() throws RemoteException {
//			return stub.getUUID();
//		}
//
//		@Override
//		public Collection<IChatRoom> getChatRooms() throws RemoteException {
//			return stub.getChatRooms();
//		}
//
//		@Override
//		public void connect(IUser userStub) throws RemoteException {
//			stub.connect(userStub);			
//		}
//		
//		public String toString() {
//			try {
//				return this.getName();
//			} catch (RemoteException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			return null;
//		}
//		
//	}
}
