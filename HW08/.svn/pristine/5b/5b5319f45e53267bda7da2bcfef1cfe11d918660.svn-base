package client.model.task;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.rmi.RemoteException;

import provided.client.model.taskUtils.ITaskFactory;
import provided.compute.ILocalTaskViewAdapter;
import provided.compute.ITask;
import provided.compute.ITaskResultFormatter;

/**
 * Task which calculates trigonometric functions sin().
 * @author Zheng You, Li Zhu
 */
public class GetSin implements ITask<Double> {
  /**
   * serialVersionUID is the serial version UID.
   */
  private static final long serialVersionUID = -2834468243303217494L;
  /**
   * Adapter to the local view. Marked "transient" so that it is not serialized
   * and instead is re-attached at the destination (the server).
   */
  private transient ILocalTaskViewAdapter taskView =
      ILocalTaskViewAdapter.DEFAULT_ADAPTER;
  /**
   * The radian degree used to calculate sin()
   */
  private double degree;
  /**
   * Constructor for the class.
   * @param degree  the radian degree
   */
  public GetSin(double degree) {
    this.degree = degree;
  }

  /**
   * Calculate sin(degree)
   */
  @Override
  public Double execute() throws RemoteException {
    taskView.append("Calculating trigonometric function sin()...");
    return Math.sin(degree);
  }

  /**
   * Reinitializes transient fields upon deserialization. taskView is set to a
   * default value for now (ILocalTaskViewAdapter.DEFAULT_ADAPTER).
   *
   * @param stream The object stream with the serialized data
   *
   * @throws IOException if the input stream cannot be read correctly
   * @throws ClassNotFoundException if the class file associated with the input
   * stream cannot be located.
   */
  private void readObject(ObjectInputStream stream) throws IOException,
    ClassNotFoundException {
    // De-serialize the non-transient data
    stream.defaultReadObject();
    // re-initialize the transient field
    taskView = ILocalTaskViewAdapter.DEFAULT_ADAPTER;
  }

  /**
   * Sets the task view adapter to a new value. Test connection by sending a
   * string representation of the dArray structure. Called by the server to
   * attach the task to its view.
   *
   * @param viewAdapter the adapter to the view.
   */
  @Override
  public void setTaskViewAdapter(ILocalTaskViewAdapter viewAdapter) {
    taskView = viewAdapter;
    viewAdapter.append("GetSin installed!\n");
    System.out.println("GetSin.setTaskViewAdapter() is invoked.\n" +
        "Test for setTaskViewAdapter()\n");
  }

  /**
   * Return an formatter that creates a String of the form:
   * "sin(degree): [result]"
   * @return  an formatter that creates a Double object
   */
  @Override
  public ITaskResultFormatter<Double> getFormatter() {
    return new ITaskResultFormatter<Double>() {
      @Override
      public String format(Double result) {
        return "sin(" + degree + "): " + result;
      }
    };
  }

  /**
   * An ITaskFactory for this task
   */
  public static final ITaskFactory<Double> FACTORY = new ITaskFactory<Double>() {
    public ITask<Double> make(String param) {
      return new GetSin(Double.parseDouble(param));
    }
    @Override
    public String toString() {
      return GetSin.class.getName();
    }
  };

}
